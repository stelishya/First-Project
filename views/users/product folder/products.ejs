<style>
    :root {
        --primary-color: #333;
        --secondary-color: #666;
        --accent-color: #4a90e2;
        --background-color: #f5f5f7;
        --white: #ffffff;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Arial', sans-serif;
    }

    body {
        background-color: var(--background-color);
    }

    .con {
        background-color: #d8d2cd;
    }

    .main-container {
        padding: 2rem 5%;
    }

    .breadcrumb {
        background-color: #d8d2cd;
        margin-bottom: 2rem;
        color: var(--secondary-color);
        /* background-color: #fff; */
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .breadcrumb a {
        color: var(--accent-color);
        text-decoration: none;
    }

    .main-content {
        background-color: #d8d2cd;
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 2rem;
    }

    .filters {
        background-color: #d8d2cd;
        /* background: var(--white); */
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        height: fit-content;
    }

    .filter-section {
        margin-bottom: 1.5rem;
    }

    .filter-title {
        font-size: 1.2rem;
        margin-bottom: 1rem;
        color: var(--primary-color);
    }

    .filter-options {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .filter-option {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--secondary-color);
        cursor: pointer;
        transition: color 0.3s;
    }

    .filter-option:hover {
        color: var(--primary-color);
    }

    .color-option {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 0.5rem;
        border: 1px solid #ddd;
    }

    .price-range {
        width: 100%;
        margin: 1rem 0;
    }

    .products-section {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .sort-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .sort-dropdown {
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        min-width: 200px;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 2rem; 
    }

    .product-card {
        background: var(--white);
        border-radius: 8px;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .zoom-container {
        position: relative;
        overflow: hidden;
        cursor: zoom-in;
    }

    .product-image {
        width: 100%;
        height: 250px;
        object-fit: cover;
        transition: transform 0.3s ease-out;
    }

    .product-info {
        padding: 1rem;
    }

    .product-title {
        font-size: 1rem;
        margin-bottom: 0.5rem;
        color: var(--primary-color);
    }

    .product-price {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 0.5rem;
    }

    .price {
        font-size: 1.25rem;
        font-weight: bold;
        color: #2c3e50;
    }

    .original-price {
        font-size: 1rem;
        color: #7f8c8d;
        text-decoration: line-through;
        margin-left: 0.5rem;
    }

    .discount {
        font-size: 0.875rem;
        color: #27ae60;
        margin-left: 0.5rem;
        font-weight: 500;
    }

    .wishlist-icon {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 10;
        cursor: pointer;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 50%;
        padding: 8px;
        transition: all 0.3s ease;
    }
    
    .wishlist-icon i {
        color: #666;
        font-size: 20px;
        transition: all 0.3s ease;
    }
    
    .wishlist-icon.active i {
        color: #ff4444;
    }
    
    .wishlist-icon:hover i {
        color: #ff4444;
    }

    /* .pagination {
        display: flex;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 2rem;
    }

    .pagination button {
        padding: 0.5rem 1rem;
        border: 1px solid #ddd;
        background: var(--white);
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    } */

    /* .pagination button.active {
        background: var(--accent-color);
        color: var(--white);
        border-color: var(--accent-color);
    }

    .pagination button:hover:not(.active) {
        background: #f0f0f0;
    } */

    @media (max-width: 968px) {
        .main-content {
            grid-template-columns: 1fr;
        }

        .filters {
            order: -1;
        }
    }

    @media (max-width: 576px) {
        .products-grid {
            grid-template-columns: 1fr;
        }

        .main-container {
            padding: 1rem;
        }
    }
</style>

<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.6.3/nouislider.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.6.3/nouislider.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>

<%- include ('../../partials/user/header', { search: search })%>
<nav>
    <div class="nav-links">
     <a href="/user/home">
      Home
     </a>
     <span class="divider">
     </span>
     <a href="#">
      Contact
     </a>
     <span class="divider">
     </span>
     <a href="#">
      About
     </a>
     <span class="divider">
     </span>
     <a href="/user/products">
      Products
     </a>
    </div>
   </nav>
    <div class="con">
        <div class="container mx-auto px-4 py-8">
            <div class="breadcrumb">
                <ol class="flex items-center space-x-2">
                    <li><a href="/user/home" class="hover:text-green-600">Home</a></li>
                    <li><span class="mx-2">/</span></li>
                    <li><a href="/user/products" class="hover:text-green-600">Products</a></li>
                </ol>
            </div>

            <div class="main-content"> 
                <aside class="filters">
                    <div class="filter-section">
                        <h3 class="text-lg font-bold mb-2 " style="font-size: x-large;"><u>Filters</u></h3>
                        <button class="mb-2"><a class="bg-gray-500 rounded p-2 mb-2" href="/user/products">Reset</a></button>
                        <h3 class="text-lg font-semibold mb-2">Categories</h3>
                        <div class="space-y-2">
                            <button onclick="showAllProducts()" 
                                   class="filter-option category-item w-full text-left px-1 py-1 rounded-md transition duration-300 bg-gray-400
                                   hover:bg-gray-300 text-grey-100 font-small md:text-sm lg:text-base">
                                Show All Products
                            </button>
                            <% categories.forEach((category)=> { %>
                                <button id="category-<%= category._id %>" 
                                        class="filter-option category-item w-full text-left px-1 py-1 rounded-md transition duration-300 bg-gray-400
                                        hover:bg-gray-300 text-grey-100 font-small md:text-sm lg:text-base"
                                        onclick="categoryFilter('<%= category._id %>')">
                                    <%= category.name %>
                                </button>
                            <% }); %>
                        </div>
                    </div>

                    <div class="filter-section">
                        <div class="mb-4">
                            <h3 class="font-bold mb-4 text-gray-800">
                                Price
                            </h3>
                            <div id="price-slider" class="mb-4"></div>
                        </div>
                    </div>
                </aside>

                <section class="products-section">
                    <div class="sort-controls " style="margin-left: 78%;">
                        <select id="sortSelection" class="sort-dropdown">
                            <option value="">Sort by</option>
                            <option value="new">Sort by: New Arrivals</option>
                            <option value="price-low-high">Price: Low to High</option>
                            <option value="price-high-low">Price: High to Low</option>
                            <option value="a-z">Sort by: Name (A-Z)</option>
                            <option value="z-a">Sort by: Name (Z-A)</option>
                        </select>
                    </div>

                    <div id="productsContainer" class="products-grid ">
                        
                    </div>

                    <!-- <script>
                    async function fetchProducts(page = 1) {
                        try {
                            const productsGrid = document.getElementById('productsContainer');
                            if (!productsGrid) {
                                console.error('Products container not found');
                                return;
                            }

                            // Build query parameters
                            const params = new URLSearchParams();
                            params.append('page', page);
                            
                            const selectedCategory = document.querySelector('.category-item.active')?.dataset?.categoryId;
                            if (selectedCategory) {
                                params.append('category', selectedCategory);
                            }

                            const sortSelection = document.getElementById('sortSelection').value;
                            if (sortSelection) {
                                params.append('sort', sortSelection);
                            }

                            const response = await fetch(`/user/products/fetch?${params.toString()}`);
                            if (!response.ok) throw new Error('Failed to fetch products');
                            
                            const data = await response.json();
                            
                            productsGrid.innerHTML = data.products.map(product => `
                                <div class="product-card" onclick="window.location.href='/user/product/details/${product._id}'">
                                    <div class="zoom-container">
                                        <img src="/uploads/product-images/${product.productImage[0]}" 
                                             alt="${product.productName}" class="product-image">
                                    </div>
                                    <div class="product-info">
                                        <h3 class="product-title">${product.productName}</h3>
                                        <div class="product-price">
                                            <div>
                                                <span class="price">₹${product.finalAmount || product.mrp} </span>
                                                // ${product.offer > 0 ? `
                                                <span class="original-price">₹${product.mrp}</span>
                                                <span class="discount">${product.offer}% OFF</span>
                                                // ` : ''}
                                            </div>
                                        </div>
                                    </div>
                                    <div class="wishlist-icon" data-product="${product._id}" 
                                         onclick="toggleWishlist(event, '${product._id}')">
                                        <i class="fas fa-heart"></i>
                                    </div>
                                </div>
                            `).join('');

                            // update pagination
                            updatePagination(data.currentPage, data.totalPages);
                        } catch (error) {
                            console.error('Error fetching products:', error);
                            showToast('Error loading products', 'error');
                        }
                    }
                    </script> -->

                    <div class="mt-4 flex justify-between items-center">
                        <div class="flex space-x-2">
                            <% if(currentPage> 1) {%>
                                <a href="?page=<%= currentPage - 1 %>"
                                    class="px-3 py-1 bg-[#5a5a5a] text-white rounded hover:bg-gray-700 transition-colors">&laquo;
                                    Previous</a>
                                <% } %>
                                    <% for(let i=1; i <=totalPages; i++) {%>
                                        <% if(i===currentPage){ %>
                                            <span class="px-3 py-1 bg-[#5a5a5a] text-white rounded">
                                                <%= i %>
                                            </span>
                                            <% } else { %>
                                                <a href="?page=<%= i %>"
                                                    class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors">
                                                    <%= i %>
                                                </a>
                                                <% } %>
                                                    <% } %>
                                                        <% if (currentPage < totalPages){%>
                                                            <a href="?page=<%= currentPage + 1 %>"
                                                                class="px-3 py-1 bg-[#5a5a5a] text-white rounded hover:bg-gray-700 transition-colors">Next
                                                                &raquo;</a>
                                                            <% } %>
                        </div>
                    </div>

                </section>
            </div>
        </div>
    </div>

    <%- include ('../../partials/user/footer')%>

    <script>
        let currentPage = 1;
        let currentSort = '';
        let currentSearch = '';
        let currentCategory = '';
        let currentPriceRange = { min: 0, max: Infinity };

    //     document.addEventListener('DOMContentLoaded', function() {
    //     // Initialize variables
    //     const urlParams = new URLSearchParams(window.location.search);
    //     let currentPriceRange = {
    //         min: <%= minPrice %>,
    //         max: <%= maxPrice %>
    //     };
    //     function initializePriceSlider(minPrice, maxPrice) {
    //         const priceSlider = document.getElementById('price-slider');
    //         if (!priceSlider) return;

    //         // Create the slider
    //         noUiSlider.create(priceSlider, {
    //             start: [minPrice, maxPrice],
    //             connect: true,
    //             range: {
    //                 'min': minPrice,
    //                 'max': maxPrice
    //             },
    //             tooltips: true,
    //             format: {
    //                 to: function(value) {
    //                     return '₹' + parseInt(value).toLocaleString();
    //                 },
    //                 from: function(value) {
    //                     return Number(value.replace('₹', '').replace(',', ''));
    //                 }
    //             }
    //         });

    //         // Listen for changes on the slider with debouncing
    //         priceSlider.noUiSlider.on('update', debounce(function(values) {
    //             const min = parseInt(values[0].replace('₹', '').replace(',', ''), 10);
    //             const max = parseInt(values[1].replace('₹', '').replace(',', ''), 10);
                
    //             currentPriceRange = { min, max };
    //             fetchProducts(1); // Reset to first page when price range changes
    //         }, 500));

    //         return priceSlider;
    //     }

    //     // Initialize the price slider with values from backend
    //     const slider = initializePriceSlider(<%= minPrice %>, <%= maxPrice %>);
    // })  
        // Initialize the noUiSlider
        var priceSlider = document.getElementById('price-slider');
        noUiSlider.create(priceSlider, {
            start: [Number(parseInt('<%= minPrice %>')), Number(parseInt('<%= maxPrice %>'))],
            connect: true,
            range: {
                'min': 0,
                'max': Number(parseInt('<%= maxPrice %>'))
            },
            tooltips: true,
            format: {
                to: function (value) {
                    return value.toFixed(0);
                },
                from: function (value) {
                    return Number(value);
                }
            }
        });

        // Listen for changes on the slider with debouncing
        priceSlider.noUiSlider.on('update', debounce(function (values) {
            currentPriceRange.min = parseInt(values[0], 10);
            currentPriceRange.max = parseInt(values[1], 10);
            fetchProducts(currentSearch, 1, currentSort, currentCategory, currentPriceRange);
        }, 500));

        function showAllProducts() {
            // Reset category selection UI
            const categoryElements = document.querySelectorAll('.category-item');
            categoryElements.forEach(el => {
                el.classList.remove('bg-gray-500', 'text-white');
                el.classList.add('bg-gray-400', 'hover:bg-gray-300', 'text-grey-100');
            });

            // Reset category filter and fetch products
            currentCategory = '';
            fetchProducts(currentSearch, 1, currentSort, '', currentPriceRange);
        }

        function categoryFilter(categoryId) {
            const categoryElements = document.querySelectorAll('.category-item');
            categoryElements.forEach(el => {
                el.classList.remove('bg-gray-500', 'text-white');
                el.classList.add('bg-gray-400', 'hover:bg-gray-300', 'text-grey-100');
            });

            // Add active class to selected category
            const selectedCategory = document.getElementById(`category-${categoryId}`);
            if (selectedCategory) {
                selectedCategory.classList.remove('bg-gray-400', 'hover:bg-gray-300', 'text-grey-100');
                selectedCategory.classList.add('bg-gray-500', 'text-white');
            }

            currentCategory = categoryId;
            fetchProducts(currentSearch, 1, currentSort, categoryId, currentPriceRange);
        }

        // Event listener for sorting
        document.getElementById('sortSelection').addEventListener('change', function(e) {
            const selectedSort = e.target.value;
            currentSort = selectedSort;
            fetchProducts(currentSearch, 1, selectedSort, currentCategory, currentPriceRange);
        });

        async function fetchProducts(searchQuery = '', page = 1, sortBy = '', categoryId = '', priceRange = currentPriceRange) {
            try {
                // Update current state
                currentPage = page;
                currentSort = sortBy;
                currentSearch = searchQuery;
                currentCategory = categoryId;
                currentPriceRange = priceRange;

                const params = new URLSearchParams({
                    page: page,
                    search: searchQuery || '',
                    sortBy: sortBy || '',
                    min: priceRange.min,
                    max: priceRange.max
                });

                if (categoryId) {
                    params.append('category', categoryId);
                }

                const response = await fetch(`/user/api/products?${params.toString()}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                
                // Update products grid
                const productsGrid = document.querySelector('.products-grid');
                if (!productsGrid) {
                    console.error('Products grid element not found');
                    return;
                }

                if (data.products.length === 0) {
                    productsGrid.innerHTML = '<div class="no-products">No products found</div>';
                    // Hide pagination when no products
                    const paginationContainer = document.querySelector('.mt-4.flex.justify-between.items-center .flex.space-x-2');
                    if (paginationContainer) {
                        paginationContainer.innerHTML = '';
                    }
                    return;
                }

                productsGrid.innerHTML = data.products.map(product => `
                    <div class="product-card" onclick="window.location.href='/user/product/details/${product._id}'">
                        <div class="zoom-container">
                            <img src="/uploads/product-images/${product.productImage[0]}" 
                                 alt="${product.productName}" class="product-image">
                        </div>
                        <div class="product-info">
                            <h3 class="product-title">${product.productName}</h3>
                            <div class="product-price">
                                <div>
                                    <span class="price">₹${product.finalAmount.toFixed(0)}</span>
                                     
                                    <span class="original-price">₹${product.mrp.toFixed(0)}</span>
                                    <span class="discount">${((product.discount/product.mrp)*100).toFixed(0)} % Off</span>
                                </div>
                            </div>
                        </div>
                        <div class="wishlist-icon" data-product="${product._id}" 
                             onclick="toggleWishlist(event, '${product._id}')">
                            <i class="fas fa-heart"></i>
                        </div>
                    </div>
                `).join('');

                // Update pagination
                const paginationContainer = document.querySelector('.mt-4.flex.justify-between.items-center .flex.space-x-2');
                if (paginationContainer) {
                    // Only show pagination if there are more than 9 products and there are products to show
                    if (data.totalProducts <= 9 || data.products.length === 0) {
                        paginationContainer.innerHTML = '';
                        return;
                    }

                    let paginationHTML = '';
                    
                    // Previous button
                    paginationHTML += `
                        <button onclick="changePage(${currentPage - 1})" 
                                class="px-3 py-1 rounded ${currentPage === 1 ? 'opacity-50 cursor-not-allowed bg-gray-300' : 'bg-gray-400 hover:bg-gray-500 text-white'}"
                                ${currentPage === 1 ? 'disabled' : ''}>
                            Previous
                        </button>
                    `;

                    // Page numbers
                    for (let i = 1; i <= data.totalPages; i++) {
                        paginationHTML += `
                            <button onclick="changePage(${i})" 
                                    class="px-3 py-1 rounded ${currentPage === i ? 'bg-gray-500 text-white' : 'bg-gray-400 hover:bg-gray-500 text-white'}">
                                ${i}
                            </button>
                        `;
                    }

                    // Next button
                    paginationHTML += `
                        <button onclick="changePage(${currentPage + 1})" 
                                class="px-3 py-1 rounded ${currentPage === data.totalPages ? 'opacity-50 cursor-not-allowed bg-gray-300' : 'bg-gray-400 hover:bg-gray-500 text-white'}"
                                ${currentPage === data.totalPages ? 'disabled' : ''}>
                            Next
                        </button>
                    `;

                    paginationContainer.innerHTML = paginationHTML;
                }

                // Initialize wishlist icons
                if (typeof checkWishlistStatus === 'function') {
                    document.querySelectorAll('.wishlist-icon').forEach(icon => {
                        const productId = icon.getAttribute('data-product');
                        if (productId) {
                            checkWishlistStatus(productId);
                        }
                    });
                }

                // Update URL with current state without reloading the page
                const newUrl = new URL(window.location.href);
                newUrl.searchParams.set('page', page);
                if (sortBy) newUrl.searchParams.set('sortBy', sortBy);
                if (searchQuery) newUrl.searchParams.set('search', searchQuery);
                if (categoryId) newUrl.searchParams.set('category', categoryId);
                if (priceRange.min !== 0) newUrl.searchParams.set('min', priceRange.min);
                if (priceRange.max !== Infinity) newUrl.searchParams.set('max', priceRange.max);
                window.history.pushState({}, '', newUrl);

            } catch (error) {
                console.error('Error fetching products:', error);
                const productsGrid = document.querySelector('.products-grid');
                if (productsGrid) {
                    productsGrid.innerHTML = '<div class="error">Error loading products. Please try again.</div>';
                }
            }
        }

        function changePage(page) {
            if (page < 1) return;
            fetchProducts(currentSearch, page, currentSort, currentCategory, currentPriceRange);
        }

        // Event listener for search
        document.getElementById('searchInput')?.addEventListener('input', debounce(function(e) {
            const searchQuery = e.target.value;
            fetchProducts(searchQuery, 1, currentSort, currentCategory, currentPriceRange);
        }, 300));

        // Debounce function
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Initial load
        document.addEventListener('DOMContentLoaded', function() {
            // Get initial values from URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const initialPage = parseInt(urlParams.get('page')) || 1;
            const initialSort = urlParams.get('sortBy') || '';
            const initialSearch = urlParams.get('search') || '';
            const initialCategory = urlParams.get('category') || '';
            const initialMin = parseInt(urlParams.get('min')) || 0;
            const initialMax = parseInt(urlParams.get('max')) || Infinity;

            // Set the initial values in the UI
            if (initialSort) {
                document.getElementById('sortSelection').value = initialSort;
            }
            if (initialSearch) {
                const searchInput = document.getElementById('searchInput');
                if (searchInput) searchInput.value = initialSearch;
            }
            if (initialMin !== 0 || initialMax !== Infinity) {
                priceSlider.noUiSlider.set([initialMin, initialMax]);
            }
            if (initialCategory) {
                const categoryElement = document.getElementById(`category-${initialCategory}`);
                if (categoryElement) {
                    categoryElement.classList.remove('bg-gray-400', 'hover:bg-gray-300', 'text-grey-100');
                    categoryElement.classList.add('bg-gray-500', 'text-white');
                }
            }

            // Fetch products with initial values
            fetchProducts(
                initialSearch, 
                initialPage, 
                initialSort, 
                initialCategory, 
                { min: initialMin, max: initialMax }
            );
        });

        // Zoom functionality
        function zoomIn(event) {
            const container = event.currentTarget;
            const image = container.querySelector('.product-image');
            const rect = container.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            const originX = (x / rect.width) * 100;
            const originY = (y / rect.height) * 100;
            image.style.transformOrigin = `${originX}% ${originY}%`;
            image.style.transform = `scale(1.5)`;
        }

        function resetZoom() {
            const images = document.querySelectorAll('.product-image');
            images.forEach(image => {
                image.style.transform = 'scale(1)';
            });
        }

        // Wishlist functions
        
        async function toggleWishlist(event, productId) {
            event.preventDefault();
            event.stopPropagation();
            
            const icon = event.currentTarget;
            
            try {
                const response = await fetch('/user/wishlist/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Toggle the heart icon
                    if (data.inWishlist) {
                        icon.classList.add('active');
                    } else {
                        icon.classList.remove('active');
                    }
                    
                    // Show success message
                    showToast(data.message, 'success');
                } else {
                    showToast(data.message || 'Error updating wishlist', 'error');
                }
            } catch (error) {
                if (error.response?.status === 401) {
                    window.location.href = '/user/login';
                    return;
                }
                showToast('Error updating wishlist', 'error');
                console.error('Error:', error);
            }
        }

        async function checkWishlistStatus(productId) {
            try {
                const response = await fetch(`/user/wishlist/check/${productId}`);
                const data = await response.json();
                if (data.success && data.inWishlist) {
                    const icon = document.querySelector(`[data-product="${productId}"]`);
                    if (icon) {
                        icon.classList.add('active');
                    }
                }
            } catch (error) {
                console.error('Error checking wishlist status:', error);
            }
        }

        function showToast(message, type) {
            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: "right",
                className: "toastify-custom",
                style: {
                    background: type === 'success' ? "#4CAF50" : "#ff4444",
                    position: "fixed",
                    top: "20px",
                    right: "20px",
                    zIndex: "9999",
                    padding: "12px 24px",
                    minWidth: "200px",
                    borderRadius: "8px",
                    fontSize: "14px",
                    fontWeight: "500"
                }
            }).showToast();
        }
    </script>