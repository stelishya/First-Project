<style>
    .modal {
        display: none;
        /* Initially hidden */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
        visibility: hidden;
        /* Hidden until modal is shown */
    }

    .modal.show {
        display: flex;
        opacity: 1;
        visibility: visible;
    }

    .modal-content {
        background-color: #fff;
        padding: 30px 20px;
        border-radius: 8px;
        width: 400px;
        max-width: 90%;
        transform: translateY(-20px);
        transition: transform 0.3s ease;
    }

    .modal.show .modal-content {
        transform: translateY(0);
    }
</style>
<!-- Header -->
<%- include('../../partials/user/header') %>

    <!-- Main Content -->
    <main class="flex">
    <!-- Sidebar -->
    <%-include('../../partials/user/dashboard_sideBar') %>
        <!-- Main Section -->
        <!-- % if (successMessage) { %>
            <div id="success_div"
                class="bg-green-500 text-white p-2 mb-5 text-center rounded transition-opacity duration-500 ease-in-out">
                <p id="success_message">
                    %= successMessage%>
                </p>
            </div>
        % } %>
        % if (errorMessage) { %>
            <div id="error_div"
                class="bg-red-600 text-white p-2 mb-5 text-center rounded transition-opacity duration-500 ease-in-out">
                <p id="error_message">
                    %= errorMessage %>
                </p>
            </div>
        % } %> -->
        <div class="bg-white shadow-lg rounded-lg p-6 w-4/5">
            <h1 class="text-2xl font-bold mb-4">Your Addresses</h1>
            <% if(addresses && addresses.length>0){ %>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <% addresses.forEach((addressDoc) => { %>
                        <% if (addressDoc.address && addressDoc.address.length > 0) { %>
                            <% addressDoc.address.forEach((address) => { %>
                                <div class="bg-gray-200 p-4 rounded-lg shadow-md">
                                    <div class="flex items-start">
                                        <input type="radio" name="address" class="mt-1 mr-2">
                                        <div>
                                            <h2><%= address.typeOfAddress %></h2>
                                            <p class="font-bold"><%= address.name %></p>
                                            <p><%= address.streetAddress %></p>
                                            <p><%= address.city %>, <%= address.pincode %></p>
                                            <p><%= address.state %>, <%= address.country %></p>
                                            <p><%= address.mobile %></p>
                                        </div>
                                        <div class="ml-auto flex space-x-2">
                                            <button class="bg-gray-600 text-white px-3 py-1 rounded-full" onclick="editAddressModal('<%= JSON.stringify(address) %>')">Edit</button>
                                            <button class="bg-gray-600 text-white px-3 py-1 rounded-full" onclick="deleteAddress('<%= address._id %>')">Delete</button>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        <% } %>
                    <% }); %>
                </div>
            <% } else{ %>
                <div class="w-full flex justify-center">
                    <p>Address is not added</p>
                    <!-- <img class="h-[300px] w-[300px]" src="/images/no address.webp" alt=""> -->
                </div>
            <% } %>
            <div class="mt-4">
                <button class="text-gray bg-gray-300 px-3 py-1 rounded-md inline-flex font-bold text-lg items-center" onclick="openAddressModal()">+ Add a new address</button>
            </div>
        </div>
        <!-- Add Address Modal -->
        <div id="addressModal" class="modal hidden">
            <div class="modal-content w-3/4 p-6 bg-white rounded-lg shadow-lg relative">
                <span class="inline-flex close-button text-right text-lg cursor-pointer absolute top-2 right-2" onclick="closeModal()">Ã—</span>
                <h2 class="font-bold text-xl mb-4 text-center">Enter the Address Details</h2>
                <form id="addressForm" action="/user/addAddress" class="flex flex-col gap-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div class="space-y-4">
                            <div>
                                <label class="block mb-2">Name</label>
                                <input id="nameInput" type="text" name="name" placeholder="Full Name" oninput="validateName()" class="w-full p-2 bg-gray-200 rounded" required>
                                <span id="nameError"></span>
                            </div>
                            
                            <div>
                                <label class="block mb-2">Street Address</label>
                                <input id="addressInput" type="text" name="streetAddress" placeholder="Street Address" oninput="validateStreetAddress()" class="w-full p-2 bg-gray-200 rounded" required>
                                <span id="addressError"></span>
                            </div>
                            <div>
                                <label class="block mb-2">Pincode</label>
                                <input id="pincodeInput" type="text" name="pincode" placeholder="Pincode" oninput="validatePincode()" class="w-full p-2 bg-gray-200 rounded" required>
                                <span id="pincodeError"></span>
                            </div>
                            <div>
                                <label class="block mb-2">Country</label>
                                <input id="countryInput" type="text" name="country" placeholder="Country" oninput="validateCountry()" class="w-full p-2 bg-gray-200 rounded" required>
                                <span id="countryError"></span>
                            </div>
                        </div>
                        <div class="space-y-4">
                            <div>
                                <label class="block mb-2">Type of Address</label>
                                <select id="typeSelect" name="typeOfAddress" class="w-full p-2 bg-gray-200 rounded">
                                    <option value="Home">Home</option>
                                    <option value="Work">Work</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div>
                                <label class="block mb-2">City</label>
                                <input id="cityInput" type="text" name="city" placeholder="City" oninput="validateCity()" class="w-full p-2 bg-gray-200 rounded" required>
                                <span id="cityError"></span>
                            </div>
                            <div>
                                <label class="block mb-2">State</label>
                                <input id="stateInput" type="text" name="state" placeholder="State" oninput="validateState()" class="w-full p-2 bg-gray-200 rounded" required>
                                <span id="stateError"></span>
                            </div>
                            <div>
                                <label class="block mb-2">Phone</label>
                                <input id="phoneInput" type="text" name="mobile" placeholder="Phone Number" oninput="validatePhone()" class="w-full p-2 bg-gray-200 rounded" required>
                                <span id="phoneError"></span>
                            </div>
                        </div>
                    </div>
                    <div class="mt-6 text-center">
                        <button type="button" class="bg-green-500 text-white py-2 px-6 rounded-full" onclick="addAddress()">Add Address</button>
                    </div>
                </form>
                <div id="message" class="hidden mt-4 text-center"></div>
            </div>
        </div>
    </main>

<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

    function openAddressModal(existingAddress = null) {
        const modal = document.getElementById('addressModal');
        const modalTitle = document.querySelector('#addressModal h2');
        const submitButton = document.querySelector('#addressModal button[type="button"]');

        // Reset form
        document.getElementById('addressForm').reset();

        if (existingAddress) {
            // Edit mode
            modalTitle.textContent = 'Edit Address Details';
            submitButton.textContent = 'Save Changes';
            submitButton.setAttribute('data-edit-mode', 'true');
            submitButton.setAttribute('data-address-id', existingAddress._id);

            // Prefill form fields
            document.getElementById('typeSelect').value = existingAddress.typeOfAddress || 'Home';
            document.getElementById('nameInput').value = existingAddress.name || '';
            document.getElementById('addressInput').value = existingAddress.streetAddress || '';
            document.getElementById('cityInput').value = existingAddress.city || '';
            document.getElementById('stateInput').value = existingAddress.state || '';
            document.getElementById('countryInput').value = existingAddress.country || '';
            document.getElementById('pincodeInput').value = existingAddress.pincode || '';
            document.getElementById('phoneInput').value = existingAddress.mobile || '';
        } else {
            // Add mode
            modalTitle.textContent = 'Add New Address';
            submitButton.textContent = 'Add Address';
            submitButton.setAttribute('data-edit-mode', 'false');
            submitButton.removeAttribute('data-address-id');
            document.getElementById('typeSelect').value = 'Home';
        }

        modal.classList.remove('hidden');
        modal.classList.add('show');
    }

    function closeModal() {
        const modal = document.getElementById('addressModal')
        modal.classList.remove('show')
        setTimeout(() => {
            modal.classList.add('hidden')
        }, 300);
    }

    function validateName() {
        const input = document.getElementById('nameInput').value.trim();
        const error = document.getElementById('nameError');
        if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
            error.textContent = 'Name should only contain letters';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validateStreetAddress() {
        const input = document.getElementById('addressInput').value.trim();
        const error = document.getElementById('addressError');
        if (!input || input.length < 5) {
            error.textContent = 'Street address should be at least 5 characters long';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validateCity() {
        const input = document.getElementById('cityInput').value.trim();
        const error = document.getElementById('cityError');
        if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
            error.textContent = 'City should only contain letters';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validateState() {
        const input = document.getElementById('stateInput').value.trim();
        const error = document.getElementById('stateError');
        if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
            error.textContent = 'State should only contain letters';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validateCountry() {
        const input = document.getElementById('countryInput').value.trim();
        const error = document.getElementById('countryError');
        if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
            error.textContent = 'Country should only contain letters';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validatePincode() {
        const input = document.getElementById('pincodeInput').value.trim();
        const error = document.getElementById('pincodeError');
        if (!/^\d{5,6}$/.test(input)) {
            error.textContent = 'Pincode should be 5 or 6 digits';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    function validatePhone() {
        const input = document.getElementById('phoneInput').value.trim();
        const error = document.getElementById('phoneError');
        if (!/^\d{10}$/.test(input)) {
            error.textContent = 'Phone number should be exactly 10 digits';
            error.style.color = 'red';
            return false;
        } else {
            error.textContent = '';
            return true;
        }
    }

    async function addAddress() {
        // Run all validations
        const isNameValid = validateName();
        const isStreetAddressValid = validateStreetAddress();
        const isCityValid = validateCity();
        const isStateValid = validateState();
        const isCountryValid = validateCountry();
        const isPincodeValid = validatePincode();
        const isPhoneValid = validatePhone();

        if (isNameValid && isStreetAddressValid && isCityValid && isStateValid && isCountryValid && isPincodeValid && isPhoneValid) {
            const submitButton = document.querySelector('#addressModal button[type="button"]');
            const isEditMode = submitButton.getAttribute('data-edit-mode') === 'true';
            const addressId = submitButton.getAttribute('data-address-id');

            const form = document.getElementById('addressForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            try {
                const url = isEditMode ? `/user/editAddress/${addressId}` : '/user/addAddress';
                console.log("Sending request to:", url, "with data:", data);
                
                const response = await fetch(url, {
                    method: isEditMode ? 'PATCH' : 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });

                const result = await response.json();
                console.log("Server response:", result);

                if (response.ok) {
                    Toastify({
                        text: isEditMode ? "Address updated successfully!" : "Address added successfully!",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        style: {
                            background: "linear-gradient(135deg, rgba(238, 174, 202, 0.9), rgba(148, 187, 233, 0.9))"
                        },
                        stopOnFocus: true,
                        className: "toast_style"
                    }).showToast();

                    closeModal();
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    Toastify({
                        text: result.message || "Failed to save address",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        style: {
                            background: "#ff6b6b"
                        },
                        stopOnFocus: true,
                        className: "toast_style"
                    }).showToast();
                }
            } catch (error) {
                console.error("Error:", error);
                Toastify({
                    text: "An error occurred while saving the address",
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    style: {
                        background: "#ff6b6b"
                    },
                    stopOnFocus: true,
                    className: "toast_style"
                }).showToast();
            }
        } else {
            Toastify({
                text: "Please correct the highlighted errors",
                duration: 3000,
                gravity: "top",
                position: "right",
                style: {
                    background: "#ff6b6b"
                },
                stopOnFocus: true,
                className: "toast_style"
            }).showToast();
        }
    }

    async function deleteAddress(addressId) {
        try {
            const { isConfirmed } = await Swal.fire({
                title: 'Delete Address',
                text: 'Are you sure you want to delete this address?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: 'No',
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6'
            });

            if (!isConfirmed) {
                return;
            }

            const response = await fetch(`/user/deleteAddress/${addressId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();
            console.log("Delete response:", data);

            if (data.success) {
                Toastify({
                    text: "Address deleted successfully",
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    style: {
                        background: "#ff6b6b"
                    },
                    className: "toast_style"
                }).showToast();

                setTimeout(() => {
                    window.location.reload();
                }, 3000);
            } else {
                throw new Error(data.message || "Failed to delete address");
            }
        } catch (error) {
            console.error("Error:", error);
            Toastify({
                text: error.message || "An error occurred while deleting the address",
                duration: 3000,
                gravity: "top",
                position: "right",
                style: {
                    background: "#ff6b6b"
                },
                className: "toast_style"
            }).showToast();
        }
    }

    function editAddressModal(addressJson) {
        try {
            console.log("Received address:", addressJson);
            const address = JSON.parse(addressJson);
            openAddressModal(address);
        } catch (error) {
            console.error("Error parsing address:", error);
            Toastify({
                text: "Error loading address details",
                duration: 3000,
                gravity: "top",
                position: "right",
                style: {
                    background: "#ff6b6b"
                },
                className: "toast_style"
            }).showToast();
        }
    }
</script>