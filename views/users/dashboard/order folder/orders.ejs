<style>
    .toast_style{
        width: fit-content;
        max-width: 300px;
        border-radius: 8px;
        padding: 12px 20px;
        border: 1px solid rgba(255, 0, 0, 0.3);
        font-family: Arial, sans-serif;
        font-size: 16px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 100;
    }

    .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0,0,0);
    background-color: rgba(0,0,0,0.4);
    padding-top: 60px;
}

.modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}
</style>
<!-- Header -->
<%- include('../../../partials/user/header') %>
<nav>
    <div class="nav-links">
     <a href="/user/home">
      Home
     </a>
     <span class="divider">
     </span>
     <a href="#">
      Contact
     </a>
     <span class="divider">
     </span>
     <a href="#">
      About
     </a>
     <span class="divider">
     </span>
     <a href="/user/products">
      Products
     </a>
    </div>
   </nav>
   
<!-- Main Content -->
<div class="flex">
    <!-- Sidebar -->
    <%- include('../../../partials/user/dashboard_sideBar',{search}) %>
    <!-- Main Section -->
    <main class="p-6 w-4/5" style="background-color: rgb(211, 208, 206);">
        <nav class="flex mb-4 bg-gray-400 rounded" aria-label="Breadcrumb">
            <ol class="inline-flex items-center space-x-1 md:space-x-3">
                <li class="inline-flex items-center">
                    <a href="/user/dashboard" class="inline-flex items-center text-gray-700 hover:text-white-600">
                        <svg class="w-4 h-4 mr-2 " fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                        </svg>
                        Account
                    </a>
                </li>
                
                <li aria-current="page">
                    <div class="flex items-center">
                        <svg class="w-6 h-6 text-gray-200" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                        <span class="ml-1 text-gray-500 md:ml-2">Orders history</span>
                    </div>
                </li>
            </ol>
        </nav>
        <h2 class="text-2xl font-bold mb-4">Order History</h2>
        <div class="space-y-4">
        <% if(totalOrders < 1){ %>
            <!-- <img src="/images/user/make_order.jpg" alt="Make orders"> -->
             <p>Make Orders</p>
        <% } %>
        <!-- Order Items -->
        <% orders.forEach((order, index) => { %>
            <div class="flex justify-between items-center p-4 border rounded mb-4">
                <div class="flex items-center">
                    <% if (order.orderedItems && order.orderedItems.length > 0) { %>
                        <!-- Product Image and Name -->
                        <!-- <a href="/user/product/<%= order.orderedItems[0].product._id %>"> -->
                            <img alt="Product Image" class="w-16 h-16 rounded mr-4" height="100" width="100" 
                                 src="<%= order.orderedItems[0].product.productImage && order.orderedItems[0].product.productImage.length 
                                        ? '/uploads/product-images/' + order.orderedItems[0].product.productImage[0] 
                                        : 'User/images/no_productImage.png' %>"/>
                        <!-- </a> -->
                        <div>
                            <p class="font-bold"><%= order.orderedItems[0].product.productName.substring(0, 15) || 'No Product Name' %></p>
                            <% if (order.orderedItems.length > 1) { %>
                                <p class="text-gray-500 text-sm">+ <%= order.orderedItems.length - 1 %> other product<%= order.orderedItems.length === 2 ? '' : "s" %></p>
                            <% } %>
                        </div>
                    <% } else { %>
                        <p>No items in this order.</p>
                    <% } %>
                </div>
                <!-- Order Info -->
                <div class="flex-1 ml-4">
                    <p class="text-sm">Order ID: <%= order.orderId ? order.orderId : order._id || 'N/A' %></p>
                    <p class="text-sm">Ordered on: <%= order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'Date not available' %></p>
                </div>
                <!-- Total Amount -->
                <div class="text-xl font-bold mr-4">Total: â‚¹<%= order.finalAmount.toFixed(0)  || '0.00' %></div>
                <div class="flex flex-col space-y-2">
                    <!-- Order Status -->
                    <div class="text-right">
                        <p class="text-sm">
                            <% if(order.returnDetails && order.returnDetails.returnRequested) { %>
                                <span class="inline-flex bg-yellow-100 text-yellow-600 px-2 py-1 rounded-md">
                                    Return <%= order.returnDetails.returnStatus %>
                                </span>
                            <% } else if(order.status === "Delivered" || order.status === "Out for delivery"){ %>
                                <span class="inline-flex bg-green-100 text-green-600 px-2 py-1 rounded-md">
                                    <%= order.status %>
                                </span>
                            <% } else if(order.status === 'Returned'){ %>
                                <span class="inline-flex bg-blue-100 text-blue-600 px-2 py-1 rounded-md">
                                    <%= order.status %>
                                </span>
                            <% } else if(order.status === "Cancelled"){ %>
                                <span class="inline-flex bg-red-100 text-red-600 px-2 py-1 rounded-md">
                                    <%= order.status %>
                                </span>
                            <% } else if(order.status === "Order Placed"){ %>
                                <span class="inline-flex bg-orange-100 text-orange-600 px-2 py-1 rounded-md">
                                    <%= order.status %>
                                </span>
                            <% } else { %>
                                <span class="inline-flex bg-yellow-100 text-yellow-600 px-2 py-1 rounded-md">
                                    <%= order.status %>
                                </span>
                            <% } %>
                             on <%= new Date(order.updatedAt).toLocaleDateString() %></p>
                    </div>
                    <a href="/user/order/details/<%= order._id %>" 
                        class="inline-flex items-center justify-center px-4 py-2 bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200 transition-colors duration-200">
                         <i class="fas fa-info-circle mr-2"></i>View Details
                     </a>
                    <% if(order.status !== "Cancelled" && order.status !== "Returned" && order.status !== "Out for delivery" && order.status !== "Delivered" && order.status !== "Payment failed"){ %>
                        <button id="cancelBtn" class="btn btn-danger bg-gray-400 rounded p-2" onclick="cancelOrder('<%= order._id %>')">Cancel Order</button>
                    <% } %>
                    <% if(order.status === "Delivered" && Date.now() <= (new Date(order.deliveredOn).getTime() + 7 * 24 * 60 * 60 * 1000) && !order.returnDetails.returnRequested){ %>
                        <button class="btn btn-primary  bg-gray-400 rounded p-2" onclick="returnOrder('<%= order._id %>')">Return Order</button>
                    <% } %>
                </div>
            </div>
            <% }) %>
            <div class="flex justify-between items-center mt-4">
                <% if (totalOrders > 0) { %>
                    <div class="text-gray-500">
                        Showing <%= (page - 1) * limit + 1 %>-<%= Math.min(page * limit, totalOrders) %> of <%= totalOrders %>
                    </div>
                <% } else { %>
                    <div class="text-gray-500">
                        No orders to display
                    </div>
                <% } %>
                <div class="flex items-center space-x-2">
                    <% if (page > 1) { %>
                        <a href="?page=<%= page - 1 %>" class="bg-gray-200 text-gray-700 px-3 py-1 rounded-md">&lt;</a>
                    <% } %>
            
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <a href="?page=<%= i %>" class="px-3 py-1 rounded-md <%= i === page ? 'bg-gray-400 text-white' : 'bg-gray-200 text-gray-700' %>"><%= i %></a>
                    <% } %>
            
                    <% if (page < totalPages) { %>
                        <a href="?page=<%= page + 1 %>" class="bg-gray-200 text-gray-700 px-3 py-1 rounded-md">&gt;</a>
                    <% } %>
                </div>
            </div>
        </div>
    </main>
</div>
<!-- Return Order Modal -->
<div id="returnOrderModal" class="modal">
    <div class="modal-content max-w-md mx-auto bg-white rounded-lg shadow-lg">
        <div class="flex justify-between items-center border-b pb-3">
            <h3 class="text-xl font-semibold text-gray-900">Return Order</h3>
            <span class="close text-gray-600 hover:text-gray-900 cursor-pointer">&times;</span>
        </div>
        <div class="py-4">
            <div class="mb-4">
                <label for="returnReason" class="block text-sm font-medium text-gray-700 mb-2">
                    Please tell us why you want to return this order
                </label>
                <textarea id="returnReason" 
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500"
                    rows="4"
                    placeholder="Enter your reason for return..."></textarea>
            </div>
            <div class="text-sm text-gray-500 mb-4">
                <p>Please note:</p>
                <ul class="list-disc pl-5 space-y-1">
                    <li>Returns are only accepted within 7 days of delivery</li>
                    <li>Product must be in original condition</li>
                    <li>Refund will be processed to your wallet</li>
                </ul>
            </div>
            <div class="flex justify-end space-x-3">
                <button onclick="closeReturnModal()" 
                    class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200">
                    Cancel
                </button>
                <button onclick="submitReturn()" 
                    class="px-4 py-2 text-sm font-medium text-white bg-gray-600 rounded-md hover:bg-gray-700">
                    Submit Return
                </button>
            </div>
        </div>
    </div>
</div>
<!-- Footer -->
<div class="text-center p-5 bg-white">
    <h1 class="text-4xl">CAlliope</h1>
    <h2 class="text-2xl">Inc</h2>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-minimal@5/minimal.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    let currentOrderId = null;

    function returnOrder(orderId) {
        currentOrderId = orderId;
        const modal = document.getElementById('returnOrderModal');
        modal.style.display = "block";
        
        // Clear previous input
        document.getElementById('returnReason').value = '';
    }

    function closeReturnModal() {
        const modal = document.getElementById('returnOrderModal');
        modal.style.display = "none";
        currentOrderId = null;
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('returnOrderModal');
        if (event.target == modal) {
            closeReturnModal();
        }
    }

    async function submitReturn() {
        if (!currentOrderId) {
            Toastify({
                text: "Error: Order ID not found",
                duration: 3000,
                gravity: "top",
                position: "right",
                style: {
                    background: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))"
                },
                className: "toast_style"
            }).showToast();
            return;
        }

        const returnReason = document.getElementById('returnReason').value.trim();
        if (!returnReason) {
            Toastify({
                text: "Please provide a reason for return",
                duration: 3000,
                gravity: "top",
                position: "right",
                style: {
                    background: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))"
                },
                className: "toast_style"
            }).showToast();
            return;
        }

        try {
            const response = await axios.post(`/user/order/return/${currentOrderId}`, {
                returnReason: returnReason
            });

            if (response.status === 200) {
                // Update UI to show return status
                const orderDiv = document.querySelector(`button[onclick="returnOrder('${currentOrderId}')"]`).closest('.flex.justify-between');
                const statusSpan = orderDiv.querySelector('.inline-flex');
                statusSpan.className = 'inline-flex bg-yellow-100 text-yellow-600 px-2 py-1 rounded-md';
                statusSpan.textContent = 'Return Requested';

                // Hide return button
                const returnBtn = orderDiv.querySelector(`button[onclick="returnOrder('${currentOrderId}')"]`);
                if (returnBtn) {
                    returnBtn.style.display = 'none';
                }

                closeReturnModal();
                
                Toastify({
                    text: response.data.message || "Return request submitted successfully",
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    style: {
                        background: "linear-gradient(135deg, rgba(238, 174, 202, 0.9), rgba(148, 187, 233, 0.9))"
                    },
                    className: "toast_style"
                }).showToast();
            }
        } catch (error) {
            console.error(error);
            Toastify({
                text: error.response?.data?.message || "Failed to submit return request",
                duration: 3000,
                gravity: "top",
                position: "right",
                style: {
                    background: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))"
                },
                className: "toast_style"
            }).showToast();
        }
    }

    async function cancelOrder(orderId){
        try {
            // Show confirmation dialog
            const result = await Swal.fire({
                title: 'Cancel Order',
                text: 'Are you sure you want to cancel this order?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it'
            });

            // If user confirms
            if (result.isConfirmed) {
                const response = await axios.patch(`/user/order/cancel/${orderId}`);
                if (response.status === 200) {
                    // Show success message
                    await Swal.fire({
                        title: 'Cancelled!',
                        text: 'Your order has been cancelled.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    // Update UI
                    const orderDiv = document.querySelector(`button[onclick="cancelOrder('${orderId}')"]`).closest('.flex.justify-between');
                    const statusSpan = orderDiv.querySelector('.inline-flex');
                    
                    // Update status display
                    statusSpan.className = 'inline-flex bg-red-100 text-red-600 px-2 py-1 rounded-md';
                    statusSpan.textContent = 'Cancelled';

                    // Hide cancel button
                    const cancelBtn = orderDiv.querySelector(`button[onclick="cancelOrder('${orderId}')"]`);
                    if (cancelBtn) {
                        cancelBtn.style.display = 'none';
                    }
                }
            }
        } catch (error) {
            console.error(error);
            // Show error message
            Swal.fire({
                title: 'Error!',
                text: error.response?.data?.message || 'Failed to cancel order',
                icon: 'error',
                confirmButtonColor: '#3085d6'
            });
        }
    }
</script>