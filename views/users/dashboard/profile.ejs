<%- include ('../../partials/user/header')%>
    <title>Calliope</title>
    <style>
        #editProfileForm {
            display: none;
            background-color: #cdcbca;
            /* Add additional styling as needed */
        }

        .modal {
            display: none;
            position: fixed;
            left: 0;
            top: 0;
            width: 80%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            position: relative;
            background-color: #fff;
            padding: 30px 20px;
            border-radius: 8px;
            width: 400px;
            max-width: 90%;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
        }

        .modal.show .modal-content {
            transform: translateY(0);
        }

        .modal-close {
            position: absolute;
            right: 20px;
            top: 10px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .password-input-group {
            position: relative;
            margin-bottom: 1rem;
        }

        .password-input-group input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
        }

        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
        }

        .form-input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            margin-bottom: 0.5rem;
        }

        .validation-feedback {
            color: #ef4444;
            margin-bottom: 1rem;
        }

        .profile-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .profile-header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .profile-image-container {
            position: relative;
            width: 200px;
            height: 200px;
            margin: 0 auto 2rem;
            transition: transform 0.3s ease;
        }

        .profile-image-container:hover {
            transform: scale(1.05);
        }

        .profile-image {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid #ff9f43;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .profile-details {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 2rem;
            margin-top: 2rem;
        }

        .detail-card {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .detail-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .edit-button {
            background: #ff9f43;
            color: white;
            border: none;
            border-radius: 50%;
            aspect-ratio: 1;
            height: 100%;
            min-height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            position: absolute;
            right: -40px;
            top: 50%;
            transform: translateY(-50%);
            box-shadow: 0 2px 8px rgba(255, 159, 67, 0.3);
        }

        .edit-button:hover {
            background: #ff9f43;
            box-shadow: 0 4px 12px rgba(255, 159, 67, 0.5);
            filter: brightness(1.1);
        }

        .input-group {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }

        .form-input {
            background-color: #fff5e6;
            border: 2px solid #ffd9b3;
            border-radius: 8px;
            padding: 0.75rem;
            width: 100%;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .form-input:focus {
            border-color: #ff9f43;
            box-shadow: 0 0 0 3px rgba(255, 159, 67, 0.2);
            outline: none;
        }

        @media (max-width: 768px) {
            .profile-details {
                grid-template-columns: 1fr;
            }
        }

        /* Animation for cards */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .detail-card {
            animation: fadeInUp 0.5s ease forwards;
        }

        .detail-card:nth-child(2) {
            animation-delay: 0.1s;
        }

        .detail-card:nth-child(3) {
            animation-delay: 0.2s;
        }

        .detail-card:nth-child(4) {
            animation-delay: 0.3s;
        }

        .input-group {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            position: relative;
        }

        .edit-button {
            position: absolute;
            right: -40px;
            top: 50%;
            transform: translateY(-50%);
        }

        .password-input-group {
            position: relative;
            margin-bottom: 1rem;
        }

        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #666;
            padding: 5px;
        }

        .password-toggle:hover {
            color: #ff9f43;
        }

        .modal-close {
            position: absolute;
            right: 1rem;
            top: 1rem;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
            transition: color 0.2s ease;
        }

        .modal-close:hover {
            color: #ff9f43;
        }

        .mb-4 {
            margin-bottom: 1rem;
            padding-right: 45px;
            /* Add padding to accommodate the edit button */
        }

        .validation-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .validation-item i {
            width: 1rem;
        }

        .validation-item.valid {
            color: #22c55e;
        }

        .validation-item.invalid {
            color: #ef4444;
        }

        .toastify {
            width: fit-content !important;
            min-width: 300px !important;
            max-width: 400px !important;
            padding: 12px 24px !important;
            border-radius: 8px !important;
            font-family: Arial, sans-serif !important;
            font-size: 16px !important;
            position: fixed !important;
            top: 20px !important;
            right: 20px !important;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2) !important;
            z-index: 9999 !important;
            opacity: 0;
            transform: translateY(-20px);
            animation: toast-in 0.3s ease-in-out forwards;
        }

        @keyframes toast-in {
            0% {
                opacity: 0;
                transform: translateY(-20px);
            }

            100% {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .toastify-progress {
            background: linear-gradient(to right, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.5)) !important;
            height: 4px !important;
            bottom: 0 !important;
            border-radius: 0 0 8px 8px !important;
        }

        .toastify-close {
            opacity: 0.7 !important;
            padding: 0 8px !important;
            font-size: 18px !important;
            transition: opacity 0.2s ease !important;
        }

        .toastify-close:hover {
            opacity: 1 !important;
        }

        .error-feedback {
            color: red;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }

        .invalid-input {
            border-color: red !important;
        }
    </style>
    <nav>
        <div class="nav-links">
         <a href="/user/home">
          Home
         </a>
         <span class="divider">
         </span>
         <a href="#">
          Contact
         </a>
         <span class="divider">
         </span>
         <a href="#">
          About
         </a>
         <span class="divider">
         </span>
         <a href="/user/products">
          Products
         </a>
        </div>
       </nav>
    <div class="flex p-0 bg-gray-300" style="background-color: rgb(232, 229, 227);">
        <%-include('../../partials/user/dashboard_sideBar') %>

            <!-- <div class="w-1/12 border-r border-gray-400"></div> -->
            <div class="w-2/3 bg-gray-300 pl-80" style="background-color: rgb(231, 228, 226); padding-top: 40px;">
                <div class="w-24 h-24 bg-gray-400 rounded-full mb-5"></div>
                <h2 class="text-2xl mb-5">User Profile</h2>
                <div class="mb-5">
                    <p data-field="username">Name: <%= user.username %>
                    </p>
                </div>
                <div class="mb-5">
                    <p data-field="email">Email: <%= user.email %>
                    </p>
                </div>
                <div class="mb-5">
                    <p data-field="mobile">Phone: <%= user.mobile %>
                    </p>
                </div>
                <button id="editButton" class="bg-gray-500 text-white p-2 flex items-center">
                    <i class="fas fa-edit mr-2"></i>Edit Profile
                </button>
            </div>
            <div id="editProfileForm" class="hidden w-100 p-6 bg-white rounded-lg shadow-lg">
                <form id="profileEditForm" class="space-y-4" action="/user/dash/saveUserDetails" method="post"
                    onsubmit="handleProfileSubmit(event)">
                    <div class="mb-4">
                        <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
                        <input type="text" id="username" name="username" value="<%= user.username %>"
                            class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-700"
                            oninput="validateUsername(this)" />
                        <div id="username-feedback" class="error-feedback"></div>
                    </div>

                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                        <p
                            class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-700">
                            <%= user.email %>
                        </p>
                    </div>

                    <div class="mb-4">
                        <label for="phone_input" class="block text-sm font-medium text-gray-700">Phone</label>
                        <input type="text" id="phone_input" name="mobile" value="<%= user.mobile %>"
                            class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-700"
                            oninput="validatePhone(this)" maxlength="15" />
                        <div id="phone-feedback" class="error-feedback"></div>
                    </div>

                    <div class="flex justify-center gap-4 mt-10">
                        <button type="submit"
                            class="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-500 transition-colors">
                            Save Changes
                        </button>
                        <button type="button" onclick="openModal()"
                            class="px-6 py-2 bg-gray-400 text-white rounded-lg hover:bg-gray-600 transition-colors">
                            Change Password
                        </button>
                        <button type="button" onclick="deleteAccount('<%= user._id %>')"
                            class="px-6 py-2 bg-red-400 text-white rounded-lg hover:bg-red-600 transition-colors">
                            Delete Account
                        </button>
                    </div>
                </form>
            </div>
    </div>
    <div id="passwordModal" class="modal hidden z-100">
        <div class="modal-content">
            <span class="modal-close" onclick="closeModal()">&times;</span>
            <h2 class="text-2xl font-bold mb-4">Change Password</h2>
            <form id="passwordForm" class="space-y-4">
                <div class="password-input-group">
                    <input type="password" class="form-input" id="newPassword"
                        oninput="validatePasswordOnInput(this.value)" required placeholder="New Password">
                    <span class="password-toggle" onclick="togglePassword('newPassword')">
                        <i class="fas fa-eye-slash"></i>
                    </span>
                </div>
                <div class="validation-feedback space-y-1 text-sm"></div>
                <div class="password-input-group">
                    <input type="password" class="form-input" id="cfmPassword" oninput="checkPasswordMatch()" required
                        placeholder="Confirm Password">
                    <span class="password-toggle" onclick="togglePassword('cfmPassword')">
                        <i class="fas fa-eye-slash"></i>
                    </span>
                </div>
                <div id="match-feedback" class="text-sm"></div>
                <button type="button"
                    class="w-full py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
                    onclick="changePassword()">
                    Update Password
                </button>
            </form>
            <div id="message" class="mt-4 text-center hidden"></div>
        </div>
    </div>

    <!-- Footer -->
    <div class="text-center p-5 bg-white">
        <h1 class="text-4xl">CAlliope</h1>
        <h2 class="text-2xl">Inc</h2>
    </div>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Validation functions
            function validateUsername(input) {
                const username = input.value.trim();
                const feedback = document.getElementById('username-feedback');
                const nameRegex = /^[a-zA-Z\s]{3,30}$/;

                if (username === '') {
                    showError(input, feedback, 'Username is required');
                    return false;
                } else if (!nameRegex.test(username)) {
                    showError(input, feedback, 'Username should be 3-30 characters long and contain only letters and spaces');
                    return false;
                } else {
                    hideError(input, feedback);
                    return true;
                }
            }

            function validatePhone(input) {
                const phone = input.value.trim();
                const feedback = document.getElementById('phone-feedback');
                const phoneRegex = /^[6-9]\d{9}$/;

                if (phone === '') {
                    showError(input, feedback, 'Phone number is required');
                    return false;
                } else if (!phoneRegex.test(phone)) {
                    showError(input, feedback, 'Please enter a valid 10-digit Indian mobile number');
                    return false;
                } else {
                    hideError(input, feedback);
                    return true;
                }
            }

            function validatePasswordOnInput(input) {
                const password = input;
                const minLength = 8;
                const hasUpperCase = /[A-Z]/.test(password);
                const hasLowerCase = /[a-z]/.test(password);
                const hasNumbers = /\d/.test(password);
                const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);

                const feedback = document.querySelector('.validation-feedback');
                if (password.length < minLength) {
                    feedback.textContent = 'Password must be at least 8 characters long';
                    feedback.style.color = 'red';
                    return false;
                } else if (!(hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar)) {
                    feedback.textContent = 'Password must contain uppercase, lowercase, numbers, and special characters';
                    feedback.style.color = 'red';
                    return false;
                } else {
                    feedback.textContent = 'Password is strong!';
                    feedback.style.color = 'green';
                    return true;
                }
            }

            function checkPasswordMatch() {
                const newPassword = document.getElementById('newPassword').value;
                const cfmPassword = document.getElementById('cfmPassword').value;
                const matchFeedback = document.getElementById('match-feedback');

                if (cfmPassword === '') {
                    matchFeedback.textContent = '';
                    return false;
                } else if (newPassword !== cfmPassword) {
                    matchFeedback.textContent = 'Passwords do not match';
                    matchFeedback.style.color = 'red';
                    return false;
                } else {
                    matchFeedback.textContent = 'Passwords match!';
                    matchFeedback.style.color = 'green';
                    return true;
                }
            }

            function togglePassword(inputId) {
                const input = document.getElementById(inputId);
                const icon = input.nextElementSibling.querySelector('i');

                if (input.type === 'password') {
                    input.type = 'text';
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                } else {
                    input.type = 'password';
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                }
            }

            function showError(input, feedback, message) {
                input.classList.add('invalid-input');
                feedback.textContent = message;
                feedback.style.display = 'block';
            }

            function hideError(input, feedback) {
                input.classList.remove('invalid-input');
                feedback.style.display = 'none';
            }

            // Make validation functions globally available
            window.validateUsername = validateUsername;
            window.validatePhone = validatePhone;
            window.validatePasswordOnInput = validatePasswordOnInput;

            // Toggle edit form
            document.getElementById('editButton').addEventListener('click', function () {
                var form = document.getElementById('editProfileForm');
                form.style.display = form.style.display === 'none' ? 'block' : 'none';
            });

            // Handle profile form submission
            document.getElementById('profileEditForm').addEventListener('submit', async function (event) {
                event.preventDefault();

                const usernameInput = document.getElementById('username');
                const phoneInput = document.getElementById('phone_input');

                // Validate both fields
                const isUsernameValid = validateUsername(usernameInput);
                const isPhoneValid = validatePhone(phoneInput);

                // Only proceed if both validations pass
                if (!isUsernameValid || !isPhoneValid) {
                    return;
                }

                try {
                    const response = await fetch('/user/dash/saveUserDetails', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            username: usernameInput.value.trim(),
                            mobile: phoneInput.value.trim()
                        })
                    });

                    const data = await response.json();

                    if (data.success) {
                        document.getElementById('editProfileForm').style.display = 'none';

                        // Update displayed information
                        const usernameElement = document.querySelector('p[data-field="username"]');
                        const mobileElement = document.querySelector('p[data-field="mobile"]');

                        if (usernameElement) usernameElement.textContent = `Name: ${usernameInput.value.trim()}`;
                        if (mobileElement) mobileElement.textContent = `Phone: ${phoneInput.value.trim()}`;

                        Toastify({
                            text: "Profile updated successfully!",
                            duration: 2000,
                            gravity: "top",
                            position: "right",
                            style: {
                                background: "linear-gradient(135deg, rgba(238, 174, 202, 0.9), rgba(148, 187, 233, 0.9))"
                            }
                        }).showToast();

                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    }
                } catch (error) {
                    Toastify({
                        text: "Error updating profile",
                        duration: 2000,
                        gravity: "top",
                        position: "right",
                        style: {
                            background: "#ff6b6b"
                        }
                    }).showToast();
                }
            });

            // Modal functions
            function openModal() {
                const modal = document.getElementById('passwordModal');
                modal.classList.remove('hidden');
                modal.classList.add('show');
                document.body.style.overflow = 'hidden';
            }

            function closeModal() {
                const modal = document.getElementById('passwordModal');
                modal.classList.remove('show');
                modal.classList.add('hidden');
                document.body.style.overflow = '';
                document.getElementById('passwordForm').reset();
                document.querySelector('.validation-feedback').textContent = '';
                document.getElementById('match-feedback').textContent = '';
            }

            // Change password function
            async function changePassword() {
                const newPassword = document.getElementById('newPassword').value;
                const cfmPassword = document.getElementById('cfmPassword').value;
                const messageElement = document.getElementById('message');

                if (!validatePasswordOnInput(newPassword)) {
                    messageElement.textContent = 'Please ensure your password meets all requirements';
                    messageElement.classList.remove('hidden');
                    messageElement.style.color = 'red';
                    setTimeout(() => {
                        messageElement.textContent = '';
                        messageElement.classList.add('hidden');
                    }, 3000);
                    return;
                }

                if (newPassword !== cfmPassword) {
                    messageElement.textContent = 'Passwords do not match';
                    messageElement.classList.remove('hidden');
                    messageElement.style.color = 'red';
                    setTimeout(() => {
                        messageElement.textContent = '';
                        messageElement.classList.add('hidden');
                    }, 3000);
                    return;
                }

                try {
                    const response = await axios.post('/user/changePassword', { password: newPassword });
                    if (response.data === 'Password edited succesfully') {
                        Toastify({
                            text: "Password updated successfully!",
                            duration: 2000,
                            gravity: "top",
                            position: "right",
                            style: {
                                background: "linear-gradient(135deg, rgba(238, 174, 202, 0.9), rgba(148, 187, 233, 0.9))"
                            },
                            className: "toast_style"
                        }).showToast();
                        closeModal();
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    } else {
                        throw new Error('Failed to update password');
                    }
                } catch (error) {
                    messageElement.textContent = error.response?.data?.message || 'An error occurred while updating password';
                    messageElement.classList.remove('hidden');
                    messageElement.style.color = 'red';
                    setTimeout(() => {
                        messageElement.textContent = '';
                        messageElement.classList.add('hidden');
                    }, 3000);
                }
            }

            // Delete account function
            window.deleteAccount = async function(userId) {
                try {
                    const { isConfirmed } = await Swal.fire({
                        title: 'Delete Account',
                        text: 'Are you sure you want to delete this address?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6'
                    });

                    if (!isConfirmed) {
                        return;
                    }

                    const response = await fetch(`/user/deleteAccount/${userId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();
                    console.log("Delete response:", data);

                    if (data.success) {
                        Toastify({
                            text: "Account deleted successfully",
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            style: {
                                background: "#ff6b6b"
                            },
                            className: "toast_style"
                        }).showToast();

                        setTimeout(() => {
                            window.location.reload();
                        }, 3000);
                    } else {
                        throw new Error(data.message || "Failed to delete account");
                    }
                } catch (error) {
                    console.error("Error:", error);
                    Toastify({
                        text: error.message || "An error occurred while deleting the account",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        style: {
                            background: "#ff6b6b"
                        },
                        className: "toast_style"
                    }).showToast();
                }
            };

            // Make functions globally available
            window.openModal = openModal;
            window.closeModal = closeModal;
            window.togglePassword = togglePassword;
            window.changePassword = changePassword;

            // Close modal when clicking outside
            window.onclick = function (event) {
                const modal = document.getElementById('passwordModal');
                if (event.target === modal) {
                    closeModal();
                }
            };
        });
    </script>