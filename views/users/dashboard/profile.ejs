<%- include ('../../partials/user/header')%>
    <title>Calliope</title>
    <style>
        #editProfileForm {
            display: none;
            /* Add additional styling as needed */
        }
        .modal {
            display: none; /* Initially hidden */
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease;
            visibility: hidden; /* Hidden until modal is shown */
        }

        .modal.show {
            display: flex;
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background-color: #fff;
            padding: 30px 20px;
            border-radius: 8px;
            width: 400px;
            max-width: 90%;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
        }

        .modal.show .modal-content {
            transform: translateY(0);
        }
        .profile-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .profile-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .profile-image-container {
        position: relative;
        width: 200px;
        height: 200px;
        margin: 0 auto 2rem;
        transition: transform 0.3s ease;
    }

    .profile-image-container:hover {
        transform: scale(1.05);
    }

    .profile-image {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid #ff9f43;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .profile-details {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 2rem;
        margin-top: 2rem;
    }

    .detail-card {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .detail-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    }

    .edit-button {
        background: #ff9f43;
        color: white;
        border: none;
        border-radius: 50%;
        aspect-ratio: 1;
        height: 100%;
        min-height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        position: absolute;
        right: -40px;
        top: 50%;
        transform: translateY(-50%);
        box-shadow: 0 2px 8px rgba(255, 159, 67, 0.3);
    }

    .edit-button:hover {
        background: #ff9f43;
        box-shadow: 0 4px 12px rgba(255, 159, 67, 0.5);
        filter: brightness(1.1);
    }

    .input-group {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
    }

    .form-input {
        background-color: #fff5e6;
        border: 2px solid #ffd9b3;
        border-radius: 8px;
        padding: 0.75rem;
        width: 100%;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-input:focus {
        border-color: #ff9f43;
        box-shadow: 0 0 0 3px rgba(255, 159, 67, 0.2);
        outline: none;
    }

    @media (max-width: 768px) {
        .profile-details {
            grid-template-columns: 1fr;
        }
    }

    /* Animation for cards */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .detail-card {
        animation: fadeInUp 0.5s ease forwards;
    }

    .detail-card:nth-child(2) {
        animation-delay: 0.1s;
    }

    .detail-card:nth-child(3) {
        animation-delay: 0.2s;
    }

    .detail-card:nth-child(4) {
        animation-delay: 0.3s;
    }

    .input-group {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    position: relative;
}

.edit-button {
    position: absolute;
    right: -40px;
    top: 50%;
    transform: translateY(-50%);
}

.password-input-group {
    position: relative;
    margin-bottom: 1rem;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
    padding: 5px;
}

.password-toggle:hover {
    color: #ff9f43;
}

.modal-close {
    position: absolute;
    right: 1rem;
    top: 1rem;
    font-size: 1.5rem;
    cursor: pointer;
    color: #666;
    transition: color 0.2s ease;
}

.modal-close:hover {
    color: #ff9f43;
}

.mb-4 {
    margin-bottom: 1rem;
    padding-right: 45px;  /* Add padding to accommodate the edit button */
}

.validation-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}
.validation-item i {
    width: 1rem;
}
.validation-item.valid {
    color: #22c55e;
}
.validation-item.invalid {
    color: #ef4444;
}

.toastify {
    width: fit-content !important;
    min-width: 300px !important;
    max-width: 400px !important;
    padding: 12px 24px !important;
    border-radius: 8px !important;
    font-family: Arial, sans-serif !important;
    font-size: 16px !important;
    position: fixed !important;
    top: 20px !important;
    right: 20px !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2) !important;
    z-index: 9999 !important;
    opacity: 0;
    transform: translateY(-20px);
    animation: toast-in 0.3s ease-in-out forwards;
}

@keyframes toast-in {
    0% {
        opacity: 0;
        transform: translateY(-20px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

.toastify-progress {
    background: linear-gradient(to right, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.5)) !important;
    height: 4px !important;
    bottom: 0 !important;
    border-radius: 0 0 8px 8px !important;
}

.toastify-close {
    opacity: 0.7 !important;
    padding: 0 8px !important;
    font-size: 18px !important;
    transition: opacity 0.2s ease !important;
}

.toastify-close:hover {
    opacity: 1 !important;
}
    </style>
    <div class="flex p-5 bg-gray-300" style="background-color: rgb(216, 210, 205);">
        <div class="w-1/4 bg-gray-300 p-5" style="background-color: rgb(216, 210, 205);">
            <div class="breadcrumb pb-5">
                <ol class="flex items-center space-x-2">
                    <li><a href="/user/home" class="hover:text-green-600">Home</a></li>
                    <li><span class="mx-2">/</span></li>
                    <li><a href="/user/dashboard" class="hover:text-green-600">Profile</a></li>
                </ol>
            </div>
            <h2 class="text-xl mb-5">Account</h2>
            <button class="w-full p-2 mb-2 bg-gray-500 text-white text-left">Information</button>
            <button class="w-full p-2 mb-2 bg-gray-500 text-white text-left">Manage address</button>
            <button class="w-full p-2 mb-2 bg-gray-500 text-white text-left">Order History</button>
            <h2 class="text-xl mt-5"><a href="#">Payments</a></h2>
            <h2 class="text-xl mt-5"><a href="/user/logout">Log Out?</a></h2>
        </div>
        <div class="w-1/12 border-r border-gray-400"></div>
        <!-- <div id="editProfileForm" style="display: none;">
            <form id="profileEditForm">
                <label for="username">Name:</label>
                <input type="text" id="username" name="username" value="<%= user.username %>">
                <label for="username">Email:</label>
                <input type="text" id="username" name="username" value="<%= user.email %>">
                <label for="username">Phone:</label>
                <input type="text" id="username" name="username" value="<%= user.mobile %>">
                <label for="username">Password:</label>
                <input type="text" id="username" name="username" value="<%= user.passsword %>">
                <button type="submit">Save</button>
            </form>
        </div> -->
        <div class="w-2/3 bg-gray-300 p-5" style="background-color: rgb(216, 210, 205);">
            <div class="w-24 h-24 bg-gray-400 rounded-full mb-5"></div>
            <h2 class="text-2xl mb-5">User Profile</h2>
            <div class="mb-5">
                <p>Name : <%= user.username %>
                </p>
            </div>
            <div class="mb-5">
                <p>Email Address : <%= user.email %>
                </p>
            </div>
            <div class="mb-5">
                <p>Phone : <%= user.mobile %>
                </p>
            </div>
            <button id="editButton" class="bg-gray-500 text-white p-2 flex items-center">
                <i class="fas fa-edit mr-2"></i>Edit Profile
            </button>
        </div>
        <div id="editProfileForm" class="hidden w-full p-6 bg-white rounded-lg shadow-lg">
            <form id="profileEditForm" class="space-y-4" action="/user/dash/saveUserDetails" method="post"
                onsubmit="handleProfileSubmit(event)">
                <!-- Name Field -->
                <div>
                    <label for="username" class="block text-medium font-medium text-gray-700">Name</label>
                    <input type="text" id="username" name="username" value="<%= user.username %>"
                        class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-700" />
                </div>

                <!-- Email Field -->
                <div>
                    <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                    <!-- <div class="form-input flex items-center">
                        <%= user.email %>
                            <% if(user.isGoogleUser){ %>
                                <img src="/images/user/google_logo.png" class="w-6 h-6 ml-2">
                                <% } %>
                    </div> -->
                    <input
                        type="text"
                        id="email"
                        name="email"
                        value="<%= user.email %>"
                        class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-700"
                    />
                </div>

                <!-- Phone Field -->
                <div>
                    <label id="phone_label" for="phone" class="block text-sm font-medium text-gray-700">Phone</label>
                    <input type="text" id="phone_input" name="mobile" value="<%= user.mobile %>"
                        class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-gray-700" />
                    <button type="button" id="phone_edit" class="edit -button" onclick="phoneEditing()">
                        <i class="fas fa-pen"></i>
                    </button>
                </div>

                <div class="flex justify-center gap-4 mt-8">
                    <button type="submit"
                        class="px-6 py-2 bg-gray-400 text-white rounded-lg hover:bg-gray-500 transition-colors">
                        Save Changes
                    </button>
                    <button type="button" onclick="openModal()"
                        class="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
                        Change Password
                    </button>
                    <button type="button"
                        class="px-6 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
                        Delete Account
                    </button>
                </div>


                <!-- Submit Button -->
                <!-- <div class="text-right">
                    <button type="submit"
                        class="px-6 py-2 bg-blue-500 text-white font-medium text-sm rounded-lg shadow-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        Save
                    </button>
                </div> -->
            </form>
        </div>

    </div>
    <div id="passwordModal" class="modal">
        <div class="modal-content">
            <span class="modal-close" onclick="closeModal()">&times;</span>
            <h2 class="text-2xl font-bold mb-4">Change Password</h2>
            <form id="passwordForm" class="space-y-4">
                <div class="password-input-group">
                    <input type="password" class="form-input" id="newPassword"
                        oninput="validatePasswordOnInput(this.value)" required placeholder="New Password">
                    <span class="password-toggle" onclick="togglePassword('newPassword')">
                        <i class="fas fa-eye"></i>
                    </span>
                </div>
                <div class="validation-feedback space-y-1 text-sm"></div>
                <div class="password-input-group">
                    <input type="password" class="form-input" id="cfmPassword" oninput="checkPasswordMatch()" required
                        placeholder="Confirm Password">
                    <span class="password-toggle" onclick="togglePassword('cfmPassword')">
                        <i class="fas fa-eye"></i>
                    </span>
                </div>
                <div id="match-feedback" class="text-sm"></div>
                <button type="button"
                    class="w-full py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
                    onclick="changePassword()">
                    Update Password
                </button>
            </form>
            <div id="message" class="mt-4 text-center hidden"></div>
        </div>
    </div>
    <!-- Footer -->
    <div class="text-center p-5 bg-white">
        <h1 class="text-4xl">CAlliope</h1>
        <h2 class="text-2xl">Inc</h2>
    </div>
    <script>
        document.getElementById('editButton').addEventListener('click', function () {
            var form = document.getElementById('editProfileForm');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        });

        document.getElementById('profileEditForm').addEventListener('submit', function (event) {
            event.preventDefault();
            var formData = new FormData(this);

            fetch('/update-profile', {
                method: 'POST',
                body: formData
            }).then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Profile updated successfully!');
                        // Optionally, update the displayed profile information
                    } else {
                        alert('Error updating profile.');
                    }
                });
        });


        function openModal() {
            const modal = document.getElementById('passwordModal');
            modal.classList.add('show');
        }

        function closeModal() {
            const modal = document.getElementById('passwordModal');
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none'; // Hide after transition ends
            }, 300);
        }

        function togglePassword(inputId) {
            const input = document.getElementById(inputId);
            const icon = event.currentTarget.querySelector('i');

            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }
        function validatePassword(password) {
        // Password requirements
        const minLength = 8;
        const hasUpperCase = /[A-Z]/.test(password);
        const hasLowerCase = /[a-z]/.test(password);
        const hasNumbers = /\d/.test(password);
        const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);

        const errors = [];
        if (password.length < minLength) {
            errors.push(`Password must be at least ${minLength} characters long`);
        }
        if (!hasUpperCase) {
            errors.push("Password must contain at least one uppercase letter");
        }
        if (!hasLowerCase) {
            errors.push("Password must contain at least one lowercase letter");
        }
        if (!hasNumbers) {
            errors.push("Password must contain at least one number");
        }
        if (!hasSpecialChar) {
            errors.push("Password must contain at least one special character");
        }

        return errors;
    }

    // Function to change the password
    async function changePassword() {
        const newPassword = document.getElementById('newPassword').value;
        const cfmPassword = document.getElementById('cfmPassword').value;
        const messageElement = document.getElementById('message');
        
        // First validate password requirements
        const passwordErrors = validatePassword(newPassword);
        if (passwordErrors.length > 0) {
            messageElement.innerHTML = passwordErrors.join('<br>');
            messageElement.classList.remove('hidden');
            messageElement.style.color = 'red';
            return;
        }

        // Then check if passwords match
        if (newPassword !== cfmPassword) {
            messageElement.textContent = "Passwords don't match";
            messageElement.classList.remove('hidden');
            messageElement.style.color = 'red';
            setTimeout(() => {
                messageElement.textContent = '';
                messageElement.classList.add('hidden')
            }, 3000);
            return;
        }

        try {
            // Make the POST request to update password
            const response = await axios.post('/user/changePassword', { password: newPassword });
            console.log(response.data)
            if(response.data === 200){
                Toastify({
                    text: "Password updated successfully!",
                    duration: 2000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "linear-gradient(135deg, rgba(238, 174, 202, 0.9), rgba(148, 187, 233, 0.9))",
                    stopOnFocus: true,
                    className: "toast_style"
                }).showToast();
            }
            // Display success message
            messageElement.textContent = 'Password updated successfully!';
            messageElement.classList.remove('hidden');
            messageElement.style.color = 'green';
            setTimeout(() => closeModal(), 1000);
        } catch (error) {
            Toastify({
                text: error.response?.data || "Error updating password",
                duration: 3000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                stopOnFocus: true,
                className: "toast_style"
            }).showToast();
            messageElement.textContent = 'Error updating password. Please try again.';
            messageElement.classList.remove('hidden');
            messageElement.style.color = 'red';
        }
    }

    function validatePasswordOnInput(password) {
        const validationDiv = document.querySelector('.validation-feedback');
        const requirements = [
            { test: p => p.length >= 8, text: "At least 8 characters" },
            { test: p => /[A-Z]/.test(p), text: "One uppercase letter" },
            { test: p => /[a-z]/.test(p), text: "One lowercase letter" },
            { test: p => /\d/.test(p), text: "One number" },
            { test: p => /[!@#$%^&*(),.?":{}|<>]/.test(p), text: "One special character" }
        ];

        // Clear previous feedback
        validationDiv.innerHTML = '';

        // Add validation items
        requirements.forEach(req => {
            const isValid = req.test(password);
            const item = document.createElement('div');
            item.className = `validation-item ${isValid ? 'valid' : 'invalid'}`;
            item.innerHTML = `
                <i class="fas ${isValid ? 'fa-check' : 'fa-times'}"></i>
                <span>${req.text}</span>
            `;
            validationDiv.appendChild(item);
        });

        // Also check password match if confirm password has value
        checkPasswordMatch();
    }

    function checkPasswordMatch() {
        const newPassword = document.getElementById('newPassword').value;
        const cfmPassword = document.getElementById('cfmPassword').value;
        const matchFeedback = document.getElementById('match-feedback');

        if (cfmPassword) {
            const matches = newPassword === cfmPassword;
            matchFeedback.className = matches ? 'text-green-500' : 'text-red-500';
            matchFeedback.innerHTML = `
                <div class="validation-item ${matches ? 'valid' : 'invalid'}">
                    <i class="fas ${matches ? 'fa-check' : 'fa-times'}"></i>
                    <span>Passwords ${matches ? 'match' : 'do not match'}</span>
                </div>
            `;
        } else {
            matchFeedback.innerHTML = '';
        }
    }

    async function handleProfileSubmit(event) {
        event.preventDefault();
        const form = event.target;
        
        try {
            const formData = new FormData(form);
            const data = {};
            formData.forEach((value, key) => {
                if (value !== '') {  // Only include non-empty values
                    data[key] = value;
                }
            });

            const response = await axios.post('/user/dash/saveUserDetails', data);
            
            if (response.status === 200) {
                Toastify({
                    text: "Profile updated successfully!",
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    style: {
                        background: "linear-gradient(to right, #00b09b, #96c93d)",
                        border: "1px solid rgba(0, 176, 155, 0.3)"
                    },
                    progressBar: true,
                    stopOnFocus: false,
                    destination: false
                }).showToast();

                // Wait for toast to show then reload
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            }
        } catch (error) {
            console.error('Error:', error);
            Toastify({
                text: error.response?.data || "An error occurred while updating profile",
                duration: 3000,
                gravity: "top",
                position: "right",
                style: {
                    background: "linear-gradient(to right, #ff5f6d, #ffc371)",
                    border: "1px solid rgba(255, 95, 109, 0.3)"
                },
                progressBar: true,
                stopOnFocus: false
            }).showToast();
        }
    }

    setTimeout(() => {
        const successDiv = document.getElementById('success_div');
        const errorDiv = document.getElementById('error_div');
        const successMessage = document.getElementById("success_message");
        const errorMessage = document.getElementById("error_message")

        if (successMessage.textContent !== '') {
            successDiv.style.opacity = "0";
            successMessage.textContent = ''
            setTimeout(() => successDiv.style.display = "none", 300); // Remove from view
        }

        if (errorMessage.textContent !== '') {
            errorDiv.style.opacity = "0";
            errorMessage.textContent = ''
            setTimeout(() => errorDiv.style.display = "none", 300); // Remove from view
        }
    }, 3000);
    </script>