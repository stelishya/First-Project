<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <style>
    body {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        background-color: #fbf8f8;
    }
    
    .header{
        text-align: center;
        width: 100%;
        height:100px;
        color: black;
        background-color: #d3c7c7;
        font-size: 30px;
        position: absolute;
        top: 0;
        left: 0;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .container_ {
        background-color: #d3c7c7;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        text-align: center;
        margin-top: 100px;
    }
    h1 {
        font-family: 'Playfair Display', serif;
        font-size:60px;
        /* margin-bottom: 1rem; */
        color: #121111;
    }
    h2{
        font-size:30px;
    }
    .otp-input {
        display: flex;
        justify-content: center;
        margin-bottom: 1.5rem;
    }
    .otp-input input {
        width: 40px;
        height: 40px;
        margin: 0 5px;
        text-align: center;
        font-size: 1.2rem;
        border: 1px solid #444;
        border-radius: 4px;
        background-color: #2a2a2a;
        color: #ffffff;
    }
    .buttons{
        display:flex;
        justify-content:center;
        gap:10px;
        margin-top: 10px;
    }
    button {
        background-color: #484f48;
        color: white;
        border: none;
        padding: 10px 20px;
        font-size: 1rem;
        border-radius: 4px;
        cursor: pointer;
    }
    button:hover {
        background-color: #506051;
    }
    button:disabled {
        background-color: #cccccc;
        color: #666666;
        cursor: not-allowed;
    }
    #timer {
        font-size: 1.2rem;
        margin-bottom: 1rem;
        color: #463c2e;
    }
    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 24px;
        border-radius: 6px;
        border-width: 1px;
        border-style: solid;
        font-size: 14px;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.3s ease-in-out;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        min-width: 200px;
        max-width: 400px;
    }

    .toast.bg-red-100 {
        background-color: #fee2e2;
        border-color: #ef4444;
        color: #991b1b;
    }

    .toast.bg-green-100 {
        background-color: #dcfce7;
        border-color: #22c55e;
        color: #166534;
    }
    </style>
</head>
<body>
    <div class="header">
        <h1>CAlliope</h1>
    </div>
    <div class="container_">
        <h2>OTP Verification</h2>
        <p>Enter the 6-digit code sent to your email: <strong><%= email %></strong></p>
        <div id="timer">Time remaining: 0:30</div>
        <form method="post" onsubmit="verifyOTP(event)">
            <div class="otp-input">
                <input type="number" min="0" max="9" class="otp-digit" name="otp[]" required maxlength="1">
                <input type="number" min="0" max="9" class="otp-digit" name="otp[]" required maxlength="1">
                <input type="number" min="0" max="9" class="otp-digit" name="otp[]" required maxlength="1">
                <input type="number" min="0" max="9" class="otp-digit" name="otp[]" required maxlength="1">
                <input type="number" min="0" max="9" class="otp-digit" name="otp[]" required maxlength="1">
                <input type="number" min="0" max="9" class="otp-digit" name="otp[]" required maxlength="1">
            </div>
            <div class="buttons">
                <button type="submit">Verify</button>
            </div>
        </form>
        <form action="/user/resendOTP" method="post">
            <div class="buttons">
                <button id="resendButton" type="submit" disabled>Resend Code</button>
            </div>
        </form>
    </div>

    <script>
        
        const inputs = document.querySelectorAll('.otp-digit');
        const timerDisplay = document.getElementById('timer');
        const resendButton = document.getElementById('resendButton');
        let timeLeft = 30;
        let timerId;
        
        function startTimer() {
            timeLeft = 30;
            clearInterval(timerId);
            resendButton.disabled = true;
            
            timerId = setInterval(() => {
                if (timeLeft <= 0) {
                    clearInterval(timerId);
                    timerDisplay.textContent = "Code expired";
                    resendButton.disabled = false;
                    inputs.forEach(input => input.disabled = true);
                } else {
                    const minutes = Math.floor(timeLeft / 60);
                    const seconds = timeLeft % 60;
                    timerDisplay.textContent = `Time remaining: ${minutes}:${seconds.toString().padStart(2, '0')}`;
                    timeLeft--;
                }
            }, 1000);
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            startTimer();
            inputs[0].focus();
        });
        
        inputs.forEach((input, index) => {
            input.addEventListener('input', (e) => {
                if (e.target.value.length > 1) {
                    e.target.value = e.target.value.slice(0, 1);
                }
                if (e.target.value.length === 1 && index < inputs.length - 1) {
                    inputs[index + 1].focus();
                }
            });
            
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && !e.target.value && index > 0) {
                    inputs[index - 1].focus();
                }
            });
        });
        
        function stopTimer() {
            clearInterval(timerId);
            timerDisplay.textContent = "";
        }

        async function verifyOTP(event) {
        event.preventDefault(); 
 
         try {
             const otpInputs = document.querySelectorAll('.otp-digit');
             const otpArray = Array.from(otpInputs).map(input => input.value);
 
             console.log('OTP Array:', otpArray);
             console.log('Request Payload:', { otp: otpArray });
 
            
             const response = await axios.post('/user/verifyOTP', { otp: otpArray });
             console.log("\notpInputs : "+otpInputs+"\notpArray : "+otpArray)
           
             if (response.data.success) {
                Swal.fire({
                    icon: "success",
                    title: "OTP Verified Successfully",
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.href = '/user/login'; 
                });
                
                // window.location.href = '/user/login';
                // stopTimer();
                // showToast(response.data.message || 'OTP verified successfully');
                 
             } else {
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: response.data.message
                });
                //  showToast(response.data.message || 'OTP verification failed. Please try again.')
                //  throw new Error(response.data.message || 'OTP verification failed. Please try again.');
                 // alert('OTP verification failed. Please try again.');
             }
         } catch (error) {
             console.error('Error verifying OTP:', error);
             showToast('An error occurred while verifying OTP.');
         }
     }
        function resendOTP() {
            fetch('/user/resendOTP', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    inputs.forEach(input => {
                        input.value = '';
                        input.disabled = false;
                    });
                    inputs[0].focus();
                    
                    startTimer();
                    
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Resent',
                        text: 'A new OTP has been sent to your email'
                    });
                } else {
                    throw new Error(data.message || 'Failed to resend OTP');
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to resend OTP'
                });
            });
        }

function showToast(message, isError = false) {
    console.log("otp toast vannu")
    const toast = document.createElement('div');
    toast.className = `toast ${isError ? 'bg-red-100 border-red-500' : 'bg-green-100 border-green-500'}`;
    toast.style.zIndex = '1100';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    requestAnimationFrame(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateY(0)';
    });
    
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateY(-20px)';
        setTimeout(() => toast.remove(), 500);
    }, 5000);
}
    </script>
</body>
</html>