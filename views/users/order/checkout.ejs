<!-- Header -->
<%- include('../../partials/user/header',{search}) %>
    <nav>
        <div class="nav-links">
            <a href="/user/home">
                Home
            </a>
            <span class="divider">
            </span>
            <a href="#">
                Contact
            </a>
            <span class="divider">
            </span>
            <a href="#">
                About
            </a>
            <span class="divider">
            </span>
            <a href="/user/products">
                Products
            </a>
        </div>
    </nav>
    <!-- Main Content -->
    <main class="flex">
        <!-- Main Section -->
        <div class="flex-1 p-8 bg-gray-50" style="background-color: #d8d2cd;">
            <div class="max-w-7xl mx-auto">
                <div class="flex justify-start mb-4">
                    <a href="/user/products"
                        class="px-4 py-2 bg-gray-400 text-black rounded hover:bg-gray-600 transition">Back to
                        Products</a>
                </div>
                <h1 class="text-3xl font-bold text-gray-800 mb-8 text-center">Checkout</h1>

                <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <!-- Left Column: Address Selection -->
                    <div class="lg:col-span-2">
                        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
                            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Delivery Address</h2>
                            <div id="addressList" class="space-y-4">
                                <% if (addresses && addresses.length> 0) { %>
                                    <% addresses.forEach(address=> { %>
                                        <div data-address-id="<%= address._id %>"
                                            class="address-card rounded-lg p-4 border-2 border-transparent transition-all duration-200 hover:border-gray-400">
                                            <div class="flex justify-between items-start">
                                                <div>
                                                    <h3 class="font-bold text-gray-800">
                                                        <%= address.name %>
                                                    </h3>
                                                    <p class="text-sm text-gray-500">
                                                        <%= address.typeOfAddress %>
                                                    </p>
                                                    <p class="text-gray-600">
                                                        <%= address.streetAddress %>
                                                    </p>
                                                    <p class="text-gray-600">
                                                        <%= address.city %>, <%= address.state %>
                                                    </p>
                                                    <p class="text-gray-600">
                                                        <%= address.country %> - <%= address.pincode %>
                                                    </p>
                                                    <p class="text-gray-600">Phone: <%= address.mobile %>
                                                    </p>
                                                </div>
                                                <div class="flex space-x-2">
                                                    <button onclick="editAddress('<%= JSON.stringify(address) %>')"
                                                        class="px-3 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition">
                                                        Edit
                                                    </button>
                                                    <button onclick="selectAddress('<%= address._id %>',this)"
                                                        class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition">
                                                        Select
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <% }); %>
                                            <% } else { %>
                                                <p class="text-gray-600">No addresses found. Please add a delivery
                                                    address.</p>
                                                <% } %>

                                                    <!-- Add New Address Button -->
                                                    <button onclick="openAddAddressModal()"
                                                        class="w-full mt-4 px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition flex items-center justify-center">
                                                        <i class="fas fa-plus mr-2"></i>
                                                        Add New Address
                                                    </button>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column: Order Summary -->
                    <div class="lg:col-span-1">
                        <div class="bg-white rounded-lg shadow-lg p-6">
                            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Order Summary</h2>
                            <!-- Product Price Breakdown -->
                            <div class="mb-4">
                                <table class="w-full text-sm">
                                    <thead class="text-gray-600 border-b">
                                        <tr>
                                            <th class="text-left py-2">Product</th>
                                            <th class="text-right py-2">Price Details</th>
                                        </tr>
                                    </thead>
                                    <tbody class="text-gray-600">
                                        <% products.forEach(product=> { %>
                                            <tr>
                                                <td class="py-2">
                                                    <!-- <%= product.productId.productName %> -->
                                                    <div class="flex items-center">
                                                        <!-- <img src="<%= product.productId.productImage %>" alt="<%= product.productId.productName %>" class="w-12 h-12 object-cover rounded mr-2"> -->
                                                        <div>
                                                            <div class="font-medium">
                                                                <%= product.productId.productName %>
                                                            </div>
                                                            <div class="text-xs text-gray-500">Qty: <%= product.quantity
                                                                    %>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>

                                                <td class="text-right">
                                                    <div class="text-sm">
                                                        <div>MRP: ₹<%= totalMRP.toFixed(0) %>
                                                        </div>
                                                        <% if (product.prices.totalDiscount> 0) { %>
                                                            <div class="text-red-500">-₹<%=
                                                                    product.prices.totalDiscount.toFixed(0) %>
                                                            </div>
                                                            <% } %>
                                                                <div class="font-semibold">₹<%=
                                                                        product.prices.totalPrice.toFixed(0) %>
                                                                </div>
                                                    </div>
                                                </td>
                                            </tr>
                                            <% }); %>
                                    </tbody>

                                    <!-- <tfoot class="border-t mt-4">
                                        <tr class="font-semibold">
                                            
                                            <td class="py-2">Total MRP</td>
                                            <td class="text-right">₹<%= totalMRP.toFixed(0) %></td>
                                        </tr>
                                        
                                        <% if (totalDiscount > 0) { %>
                                            <tr>
                                               
                                                <td class="py-2 text-red-500">Total Discount</td>
                                                <td class="text-right text-red-500">-₹<%= totalDiscount.toFixed(0) %></td>
                                            </tr>
                                        <% } %>
                                        <tr class="font-bold text-lg">
                                            <td class="py-2">Final Amount</td>
                                            <td class="text-right">₹<%= totalAmount.toFixed(0) %></td>
                                        </tr>
                                    </tfoot> -->
                                </table>
                            </div>
                            <!-- Coupon Section -->
                            <div class="flex items-center justify-between mb-4">
                                <button onclick="openCouponModal()"
                                    class="bg-gray-300 text-gray-600 px-4 py-2 rounded hover:bg-gray-400">
                                    View Available Coupons
                                </button>
                            </div>
                            <div id="appliedCouponSection" class="hidden">
                                <div class="flex items-center">
                                    <span id="appliedCouponCode" class="text-green-600 mr-2"></span>
                                    <button onclick="removeCoupon()" id="couponRemoveBtn"
                                        class="px-3 py-1 bg-red-400 text-white text-sm rounded hover:bg-red-500 transition-colors">
                                        Remove
                                    </button>
                                </div>
                            </div>
                            <!-- <button onclick="removeCoupon()" id="couponRemoveBtn"
                                    class="hidden px-4 py-2 bg-gray-400 text-white rounded-lg hover:bg-gray-500 transition-colors">
                                    Remove
                            </button> -->
                            <p id="couponMessage" class="text-sm mt-2"></p>
                            <!-- Discount Breakdown -->
                            <hr class="my-4 border-gray-200">
                            <div class="flex pb-2">
                                <div class="">
                                    <h3>Total MRP</h3>
                                </div>
                                <div style="margin-left:67%">₹<%= totalMRP.toFixed(0) %>
                                </div>
                            </div>
                            <div class="space-y-2 mb-4">
                                <% if (totalDiscount> 0) { %>
                                    <div class="flex justify-between text-gray-600 pb-2">
                                        <span class="flex items-center">
                                            <i class="fas fa-minus-circle text-red-500 mr-2"></i>
                                            Product Discount
                                        </span>
                                        <span class="text-red-500">-₹<%= totalDiscount.toFixed(0) %></span>
                                        <!-- .toFixed(2) -->
                                    </div>
                                    <% } %>
                                        <div id="couponDiscount" class="flex hidden justify-between text-gray-600">
                                            <span><i class="fas fa-minus-circle text-red-500 mr-2"></i>Coupon
                                                Discount</span>
                                            <span id="couponDiscountValue" class="text-red-600">-₹0</span>
                                        </div>
                                        <!-- <span>Total Discount</span>
                                <span class="text-red-600"></span> -->
                                        <div class="flex justify-between text-gray-600">
                                            <span>Shipping</span>
                                            <span class="text-green-600">Free</span>
                                        </div>
                            </div>
                            <!-- Total Amount -->
                            <hr class="my-4 border-gray-200">
                            <div class="flex justify-between font-bold text-lg">
                                <span>Total Amount</span>
                                <span id="totalAmount" class="text-gray-500">₹<%= totalAmount.toFixed(0) ||0 %></span>
                            </div>

                            <!-- Payment Options -->
                            <div class="mt-6">
                                <h3 class="font-semibold text-gray-700 mb-3">Payment Methods</h3>
                                <div class="space-y-2">
                                    <% paymentMethods.forEach(method=> { %>
                                        <label
                                            class="flex items-center space-x-3 p-3 bg-gray-200 rounded-lg cursor-pointer hover:bg-gray-300 transition-colors"
                                            id="payment-<%= method.toLowerCase().replace(/\s+/g, '-') %>-label">
                                            <input type="radio" name="payment" value="<%= method %>"
                                                class="text-gray-500 focus:ring-gray-500"
                                                id="payment-<%= method.toLowerCase().replace(/\s+/g, '-') %>" 
                                                <% if (method==='COD' && totalAmount> 3000) { %>disabled<% } %>>
                                                <span>
                                                    <%= method %>
                                                </span>
                                                <% if (method === 'COD' && totalAmount > 1000) { %>
                                            <span class="ml-2 text-sm text-red-500">(Not available for orders above ₹1000)</span>
                                        <% } %> 
                                        </label>
                                        <% }); %>
                                </div>
                            </div>

                            <% if (isBuyNow) { %>
                                <button onclick="placeOrder('<%= totalAmount %>', '<%= products[0].productId._id %>')"
                                    class="w-full py-3 text-white rounded-lg hover:bg-gray-500 transition-colors mt-6"
                                    style="background-color: #716f6e;">
                                    Place Order
                                </button>
                            <% } else { %>
                            <button onclick="placeOrder('<%= totalAmount %>')"
                                // ,'%= products[0].productId._id %>')"
                                class="w-full py-3  text-white rounded-lg hover:bg-gray-500 transition-colors mt-6"
                                style="background-color: #716f6e;">
                                Place Order
                            </button>
                            <% } %>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <!-- Footer -->
    <div class="text-center p-5 bg-white">
        <h1 class="text-4xl">CAlliope</h1>
        <h2 class="text-2xl">Inc</h2>
    </div>

    <style>
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            transition: all 0.3s ease-in-out;
        }

        .modal.show {
            display: flex;
            opacity: 1;
        }

        .modal-content {
            transform: translateY(-20px);
            transition: transform 0.3s ease-in-out;
        }

        .modal.show .modal-content {
            transform: translateY(0);
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 24px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            transform: translateX(120%);
            transition: transform 0.3s ease-in-out;
        }

        .toast.show {
            transform: translateX(0);
        }

        .address-card {
            background-image: linear-gradient(to right, #b9b6b4, #c4bfbb);
            color: inherit;
        }

        .border-gray-500 {
            border: 3px solid #6c6867;
            /* Tomato color for a more vibrant border */
            background-color: #fff5f5;
            /* Softer background to match the theme */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            /* Subtle shadow for depth */
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
            /* Smooth transitions */
            border-radius: 8px;
            /* Rounded corners for a modern look */
        }

        .selected-button {
            background-color: #4a4a4a;
            color: #ffffff;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
            cursor: pointer;
        }

        .selected-button:hover {
            background-color: #e5533d;
            /* Slightly darker shade on hover */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            /* Enhanced shadow on hover */
        }
    </style>

    <!-- Address Modal -->
    <div id="addressModal" class="modal">
        <div class="modal-content w-full max-w-xl bg-white rounded-lg shadow-lg relative">
            <div class="bg-gray-400 text-white p-4 rounded-t-lg">
                <h2 class="text-xl font-semibold" id="modalTitle">Add New Address</h2>
                <button onclick="closeModal()" class="absolute top-3 right-3 text-white hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <form id="addressForm" class="p-6">
                <input type="hidden" id="addressId" name="addressId">
                <div class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-gray-700 font-medium mb-1">Full Name</label>
                            <input name="name" type="text" id="nameInput"
                                class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-gray-400 focus:border-gray-400"
                                placeholder="Enter your full name">
                            <span id="nameError" class="text-red-500 text-sm"></span>
                        </div>
                        <div>
                            <label class="block text-gray-700 font-medium mb-1">Type of Address</label>
                            <select name="typeOfAddress" id="typeInput"
                                class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-gray-400 focus:border-gray-400">
                                <option value="Home">Home</option>
                                <option value="Work">Work</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-gray-700 font-medium mb-1">Street Address</label>
                            <input name="streetAddress" type="text" id="streetInput"
                                class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-gray-400 focus:border-gray-400"
                                placeholder="Enter street address">
                            <span id="streetError" class="text-red-500 text-sm"></span>
                        </div>
                        <div>
                            <label class="block text-gray-700 font-medium mb-1">City</label>
                            <input name="city" type="text" id="cityInput"
                                class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-gray-400 focus:border-gray-400"
                                placeholder="Enter city">
                            <span id="cityError" class="text-red-500 text-sm"></span>
                        </div>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-gray-700 font-medium mb-1">Pincode</label>
                            <input name="pincode" type="text" id="pincodeInput"
                                class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-gray-400 focus:border-gray-400"
                                placeholder="Enter pincode">
                            <span id="pincodeError" class="text-red-500 text-sm"></span>
                        </div>
                        <div>
                            <label class="block text-gray-700 font-medium mb-1">State</label>
                            <input name="state" type="text" id="stateInput"
                                class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-gray-400 focus:border-gray-400"
                                placeholder="Enter state">
                            <span id="stateError" class="text-red-500 text-sm"></span>
                        </div>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-gray-700 font-medium mb-1">Country</label>
                            <input name="country" type="text" id="countryInput"
                                class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-gray-400 focus:border-gray-400"
                                placeholder="Enter country">
                            <span id="countryError" class="text-red-500 text-sm"></span>
                        </div>
                        <div>
                            <label class="block text-gray-700 font-medium mb-1">Phone Number</label>
                            <input name="mobile" type="tel" id="phoneInput"
                                class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-gray-400 focus:border-gray-400"
                                placeholder="Enter phone number">
                            <span id="phoneError" class="text-red-500 text-sm"></span>
                        </div>
                    </div>

                </div>

                <div class="mt-6 flex justify-end space-x-3">
                    <button type="button" onclick="closeModal()"
                        class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors">
                        Cancel
                    </button>
                    <button type="submit"
                        class="px-6 py-2 bg-gray-400 text-white rounded-lg hover:bg-gray-500 transition-colors">
                        Save Address
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Coupon Modal -->
    <div id="couponModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-[500px] shadow-lg rounded-md bg-white">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-gray-900">Available Coupons</h3>
                <button onclick="closeCouponModal()" class="text-gray-400 hover:text-gray-500">
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <div class="mt-2">
                <!-- Available Coupons List -->
                <div id="availableCoupons" class="mb-4 space-y-3 max-h-[300px] overflow-y-auto">
                    <!-- Coupons will be loaded here -->
                </div>

                <!-- Manual Coupon Input -->
                <div class="border-t pt-4">
                    <p class="text-sm text-gray-600 mb-2">Have a different coupon?</p>
                    <input type="text" id="couponCode" class="w-full border rounded px-3 py-2 mb-3"
                        placeholder="Enter coupon code">

                    <div id="couponMessage" class="text-sm mb-3"></div>

                    <div class="flex justify-end space-x-2">
                        <button onclick="closeCouponModal()"
                            class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">
                            Cancel
                        </button>
                        <button onclick="applyCoupon()"
                            class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                            Apply
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>

        // Address selection
        let selectedAddressId = null;
        function selectAddress(addressId, buttonElement) {
            selectedAddressId = addressId;
            console.log("selectedAddressId:", selectedAddressId)
            // Remove selection from all addresses
            document.querySelectorAll('#addressList > div').forEach(div => {
                div.classList.remove('border-gray-500');
                div.querySelector('button:last-child').textContent = 'Select';
            });
            // Add selection to clicked address
            const addressCard = buttonElement.closest('[data-address-id]');
            addressCard.classList.add('border-gray-500');
            buttonElement.textContent = 'Selected';
            buttonElement.classList.add('selected-button');
        }

        async function saveAddress(event) {
            event.preventDefault();

            try {
                const addressId = document.getElementById('addressId').value;
                const formData = {
                    typeOfAddress: document.getElementById('typeInput').value,
                    name: document.getElementById('nameInput').value,
                    streetAddress: document.getElementById('streetInput').value,
                    city: document.getElementById('cityInput').value,
                    state: document.getElementById('stateInput').value,
                    country: document.getElementById('countryInput').value,
                    pincode: document.getElementById('pincodeInput').value,
                    mobile: document.getElementById('phoneInput').value
                };

                // Validate required fields
                const requiredFields = ['name', 'streetAddress', 'city', 'state', 'country', 'pincode', 'mobile'];
                const missingFields = requiredFields.filter(field => !formData[field]);

                if (missingFields.length > 0) {
                    throw new Error(`Please fill in all required fields: ${missingFields.join(', ')}`);
                }

                let response;
                if (addressId) {
                    // Edit existing address
                    response = await fetch(`/user/editAddress/${addressId}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
                } else {
                    // Add new address
                    response = await fetch('/user/addAddress', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            address: formData
                        })
                    });
                }

                const data = await response.json();

                if (data.success) {
                    showToast(data.message || 'Address saved successfully');
                    closeModal();
                    // Reload the page to show updated addresses
                    window.location.reload();
                } else {
                    throw new Error(data.message || 'Failed to save address');
                }
            } catch (error) {
                console.error('Error saving address:', error);
                showToast(error.message || 'Failed to save address. Please try again.', true);
            }
        }

        // Update the form submission handler
        document.getElementById('addressForm').onsubmit = saveAddress;

        function editAddress(addressData) {
            try {
                const address = typeof addressData === 'string' ? JSON.parse(addressData) : addressData;
                openAddressModal(address);
                // const address = JSON.parse(addressData);
                const modal = document.getElementById('addressModal');
                const modalTitle = document.getElementById('modalTitle');
                const form = document.getElementById('addressForm');

                // Set modal title
                // modalTitle.textContent = 'Edit Address';

                // Fill form fields
                document.getElementById('addressId').value = address._id;
                document.getElementById('nameInput').value = address.name;
                document.getElementById('typeInput').value = address.typeOfAddress || '';
                document.getElementById('streetInput').value = address.streetAddress;
                document.getElementById('cityInput').value = address.city;
                document.getElementById('stateInput').value = address.state;
                document.getElementById('countryInput').value = address.country;
                document.getElementById('pincodeInput').value = address.pincode;
                document.getElementById('phoneInput').value = address.phone || address.mobile;

                // Update form action
                form.onsubmit = saveAddress;

                // Show modal
                modal.classList.add('show');
            } catch (error) {
                console.error('Error parsing address data:', error);
                showToast('Error editing address', true);
            }
        }
        function openAddressModal(address = null) {
            const modal = document.getElementById('addressModal');
            const modalTitle = document.getElementById('modalTitle');
            const form = document.getElementById('addressForm');
            modal.style.zIndex = '1100';

            // Reset form and clear any previous errors
            form.reset();
            clearErrors();

            if (address) {
                // Edit mode
                modalTitle.textContent = 'Edit Address';

                // Fill form with existing address data
                document.getElementById('nameInput').value = address.name;
                document.getElementById('streetInput').value = address.streetAddress;
                document.getElementById('cityInput').value = address.city;
                document.getElementById('stateInput').value = address.state;
                document.getElementById('countryInput').value = address.country;
                document.getElementById('pincodeInput').value = address.pincode;
                document.getElementById('phoneInput').value = address.phone;

                form.action = `/user/editAddress/${address._id}`;
                form.method = 'PATCH';
            } else {
                // Add mode
                modalTitle.textContent = 'Add New Address';
                form.action = '/user/addAddress';
                form.method = 'POST';
            }

            modal.classList.add('show');
        }

        function openAddAddressModal() {
            const modal = document.getElementById('addressModal');
            const modalTitle = document.getElementById('modalTitle');
            const form = document.getElementById('addressForm');

            // Reset form
            form.reset();
            document.getElementById('addressId').value = '';

            // Set title
            modalTitle.textContent = 'Add New Address';

            // Update form action
            form.onsubmit = saveAddress;

            // Show modal
            modal.classList.add('show');
        }

        function closeModal() {
            const modal = document.getElementById('addressModal');
            modal.classList.remove('show');

            // Clear form fields
            const form = document.getElementById('addressForm');
            form.reset();

            // Clear all error messages
            const errorElements = document.querySelectorAll('[id$="Error"]');
            errorElements.forEach(element => {
                element.textContent = '';
            });
        }

        function showToast(message, isError = false) {
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 px-4 py-2 rounded-lg z-50 ${isError ? 'bg-red-100 text-red-700 border border-red-500' : 'bg-green-100 text-green-700 border border-green-500'}`;
            // toast.className = `toast ${isError ? 'bg-red-100 border-red-500' : 'bg-green-100 border-green-500'}`;
            toast.style.zIndex = '1100';
            toast.textContent = message;
            document.body.appendChild(toast);

            // Show toast with animation
            requestAnimationFrame(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateY(0)';
            });

            // Hide and remove toast
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateY(20px)';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        function updateCODAvailability(totalAmount) {
            const codInput = document.getElementById('payment-cod');
            const codLabel = document.getElementById('payment-cod-label');

            if (!codInput || !codLabel) return; // Exit if elements don't exist

            if (totalAmount > 1000) {
                codInput.disabled = true;
                codInput.checked = false; // Uncheck if it was checked
                if (!codLabel.querySelector('.text-red-500')) {
                    const warning = document.createElement('span');
                    warning.className = 'ml-2 text-sm text-red-500';
                    warning.textContent = '(Not available for orders above ₹1000)';
                    codLabel.appendChild(warning);
                }
            } else {
                codInput.disabled = false;
                const warning = codLabel.querySelector('.text-red-500');
                if (warning) {
                    warning.remove();
                }
            }
        }


        async function placeOrder(finalAmount, productId = null) {
            if (!selectedAddressId) {
                showToast('Please select a delivery address', true);
                return;
            }

            const selectedPayment = document.querySelector('input[name="payment"]:checked');
            
            if (!selectedPayment) {
                showToast('Please select a payment method', true);
                return;
            }
            console.log('Selected Payment:', selectedPayment.value);

            try {
                const urlParams = new URLSearchParams(window.location.search);
                // const isBuyNow = urlParams.get('buyNow') === 'true';
                const quantity = urlParams.get('quantity') || 1;

                // Determine if this is a single product order or cart order
                // const isSingleProduct = Boolean(productId);
                // console.log("Order type:", isSingleProduct ? "Single Product" : "Cart");

                const appliedCouponText = document.getElementById('appliedCouponCode')?.textContent;
                const couponCode = appliedCouponText?.split(' - ')[0]?.replace('Applied: ', '') || null;
                console.log('Applied Coupon Text:', appliedCouponText);
                console.log('Extracted Coupon Code:', couponCode);

                let orderData = {
                    addressId: selectedAddressId,
                    total: parseFloat(finalAmount),
                    paymentType: selectedPayment.value,
                    // buyNow: false,
                    quantity: parseInt(quantity),
                    couponCode: couponCode

                };
                // Set buyNow based on whether productId is provided
                if (productId) {
                    orderData.buyNow = true;
                    orderData.singleProductId = productId;
                    console.log("Single product order:", productId);
                } else {
                    orderData.buyNow = false;
                    console.log("Cart order");
                }
                // console.log("orderData.buyNow", orderData.buyNow)
                // if (isBuyNow && productId) {
                // if (productId) {
                //     orderData.singleProductId = productId;
                //     orderData.buyNow = true;
                //     console.log("Setting buyNow to true for product:", productId); 
                // }

                console.log("Placing order with data:", orderData);

                if (selectedPayment.value === 'Online Payment') {
                    try {
                        const totalAmount = document.getElementById('totalAmount').textContent.replace('₹', '').trim();
                        // Create Razorpay order
                        const response = await axios.post('/user/create-order', {
                            amount: totalAmount,
                            // totalDiscount: discount,
                            couponDiscount: currentCouponDiscount 
                        });
                        console.log("Razorpay order response:", response.data);

                        if (!response.data.id) {
                            showToast('Failed to create payment order', true);
                            return;
                        }
                        // Create Razorpay order with the same data
                        const razorpayOrderData = { ...orderData };
                        console.log("Preparing Razorpay order with data:", razorpayOrderData);

                        // // Create order data for Razorpay
                        // const currentOrderData = {
                        //     addressId: selectedAddressId,
                        //     total: parseFloat(finalAmount),
                        //     paymentType: 'Online Payment',
                        //     // buyNow: true, // Since this is a buy now flow
                        //     // singleProductId: productId,
                        //     quantity: parseInt(quantity)
                        // };

                        // // Set appropriate flags for Razorpay order
                        // if (isSingleProduct) {
                        //     currentOrderData.buyNow = true;
                        //     currentOrderData.singleProductId = productId;
                        //     console.log("Razorpay: Single product order for:", productId);
                        // } else {
                        //     currentOrderData.buyNow = false;
                        //     console.log("Razorpay: Cart order");
                        // }

                        // console.log("Preparing Razorpay order with data:", currentOrderData);

                        // Initialize Razorpay payment
                        const options = {
                            key: response.data.key_id,
                            // key: "%= process.env.RAZORPAY_KEY_ID %>",
                            amount: response.data.amount,
                            currency: "INR",
                            name: "CAlliope",
                            // description: "Product Purchase",
                            description: orderData.buyNow ? "Single Product Purchase" : "Cart Order",
                            order_id: response.data.id,
                            handler: function (response) {
                                handlePaymentSuccess(response, razorpayOrderData);
                            },
                            theme: {
                                color: "#3399cc"
                            }
                        };

                        const rzp = new Razorpay(options);
                        // rzp.on('payment.failed', function (response) {
                        //     console.error("Payment failed:", response.error);
                        //     showToast(response.error.description || 'Payment failed', true);
                        // });
                        rzp.open();
                    } catch (error) {
                        console.error('Razorpay initialization error:', error);
                        showToast('Failed to initialize payment', true);
                    }
                } else if(selectedPayment.value === 'Cash on Delivery') {
                try{
                    console.log("Placing COD order");
                    // For COD and other payment methods
                    const response = await axios.post('/user/order/creation', orderData);
                    if (response.data.success) {
                        await Swal.fire({
                            title: 'Order Placed Successfully!',
                            text: 'Thank you for your purchase.',
                            icon: 'success',
                            confirmButtonText: 'View Orders',
                            confirmButtonColor: '#f97316'
                        });
                        window.location.href = '/user/orders';
                    }else{
                        showToast(response.data.message || 'Failed to place order', true);
                    }
                }catch(error){
                    console.error('Error placing COD order:', error);
                    showToast(error.response?.data?.message || 'Failed to place order - catch', true);
                }
                }
            } catch (error) {
                console.error('Error in order placement:', error);
                showToast(error.response?.data?.message || 'Failed to place order. Please try again.', true);
            }
        }

        async function handlePaymentSuccess(response, orderData) {
            try {
                console.log("Verifying payment...", response);
                const verifyResponse = await axios.post('/user/verify-payment', {
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                    orderData: orderData
                });

                if (verifyResponse.data.success) {
                    await Swal.fire({
                        title: 'Payment Successful!',
                        text: 'Your order has been placed.',
                        icon: 'success',
                        confirmButtonText: 'View Orders',
                        confirmButtonColor: '#f97316'
                    });
                    window.location.href = '/user/orders';
                } else {
                    throw new Error(verifyResponse.data.message || 'Payment verification failed');
                }
            } catch (error) {
                console.error('Payment verification error:', error);
                showToast(error.message || 'Payment verification failed', true);
            }
        }

        // Form validation functions
        function validateName() {
            const input = document.getElementById('nameInput').value.trim();
            const error = document.getElementById('nameError');
            if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
                error.textContent = 'Name should only contain letters';
                error.style.color = 'red';
                return false;
            } else {
                error.textContent = '';
                return true;
            }
        }

        function validateStreetAddress() {
            const input = document.getElementById('streetInput').value.trim();
            const error = document.getElementById('streetError');
            if (!input || input.length < 5) {
                error.textContent = 'Street address should be at least 5 characters long';
                error.style.color = 'red';
                return false;
            } else {
                error.textContent = '';
                return true;
            }
        }

        function validateCity() {
            const input = document.getElementById('cityInput').value.trim();
            const error = document.getElementById('cityError');
            if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
                error.textContent = 'City should only contain letters';
                error.style.color = 'red';
                return false;
            } else {
                error.textContent = '';
                return true;
            }
        }

        function validateState() {
            const input = document.getElementById('stateInput').value.trim();
            const error = document.getElementById('stateError');
            if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
                error.textContent = 'State should only contain letters';
                error.style.color = 'red';
                return false;
            } else if (input[0].toLowerCase() === input[0]) {
                error.textContent = 'First letter should be uppercase';
                error.style.color = 'red';
                return false;
            } else {
                error.textContent = '';
                return true;
            }
        }

        function validatePincode() {
            const input = document.getElementById('pincodeInput').value.trim();
            const error = document.getElementById('pincodeError');
            if (!input || !/^\d{6}$/.test(input)) {
                error.textContent = 'Pincode should be exactly 6 digits';
                error.style.color = 'red';
                return false;
            } else {
                error.textContent = '';
                return true;
            }
        }

        function validatePhone() {
            const input = document.getElementById('phoneInput').value.trim();
            const error = document.getElementById('phoneError');
            if (!input || !/^\d{10}$/.test(input)) {
                error.textContent = 'Phone number should be exactly 10 digits';
                error.style.color = 'red';
                return false;
            } else {
                error.textContent = '';
                return true;
            }
        }

        function validateCountry() {
            const input = document.getElementById('countryInput').value.trim();
            const error = document.getElementById('countryError');
            if (!input || !/^[a-zA-Z\s]+$/.test(input)) {
                error.textContent = 'Country should only contain letters';
                error.style.color = 'red';
                return false;
            } else {
                error.textContent = '';
                return true;
            }
        }

        // Add input event listeners
        document.getElementById('nameInput')?.addEventListener('input', validateName);
        document.getElementById('streetInput')?.addEventListener('input', validateStreetAddress);
        document.getElementById('cityInput')?.addEventListener('input', validateCity);
        document.getElementById('stateInput')?.addEventListener('input', validateState);
        document.getElementById('pincodeInput')?.addEventListener('input', validatePincode);
        document.getElementById('phoneInput')?.addEventListener('input', validatePhone);
        document.getElementById('countryInput')?.addEventListener('input', validateCountry);

        // Handle form submission with validation
        document.getElementById('addressForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            // Run all validations
            const isNameValid = validateName();
            const isStreetAddressValid = validateStreetAddress();
            const isCityValid = validateCity();
            const isStateValid = validateState();
            const isPincodeValid = validatePincode();
            const isPhoneValid = validatePhone();
            const isCountryValid = validateCountry();

            if (isNameValid && isStreetAddressValid && isCityValid && isStateValid &&
                isPincodeValid && isPhoneValid && isCountryValid) {

                try {
                    const formData = new FormData(this);
                    const data = Object.fromEntries(formData);
                    const isEditMode = this.action.includes('editAddress');

                    let response;
                    if (isEditMode) {
                        const addressId = this.action.split('/').pop();
                        response = await axios.patch(`/user/editAddress/${addressId}`, data);
                    } else {
                        response = await axios.post('/user/addAddress', data);
                    }

                    if (response.status === 200 || response.status === 201) {
                        showToast(isEditMode ? 'Address updated successfully!' : 'Address saved successfully!');
                        closeModal();
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    }
                } catch (error) {
                    console.error("Error saving address:", error);
                    showToast('Failed to save address. Please try again.', true);
                }
            } else {
                showToast('Please correct all validation errors before submitting.', true);
            }
        });

        // Wishlist functionality
        document.querySelectorAll('.add-to-wishlist').forEach(button => {
            button.addEventListener('click', async function () {
                const productId = this.dataset.product;
                try {
                    const response = await fetch('/wishlist/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ productId: productId })
                    });
                    const data = await response.json();
                    if (data.success) {
                        alert('Product added to wishlist!');
                    } else {
                        alert(data.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error adding to wishlist');
                }
            });
        });

        // Razorpay
        function initiatePayment(amount) {
            fetch('/user/create-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ amount: amount })
            })
                .then(response => response.json())
                .then(order => {
                    var options = {
                        "key": process.env.RAZORPAY_KEY_ID,
                        "amount": order.amount,
                        "currency": "INR",
                        "name": "CAlliope",
                        "description": "Wall Art",
                        "order_id": order.id,
                        "handler": function (response) {
                            // Handle successful payment
                            verifyPayment(response);
                        },
                        // "prefill": {
                        //     "name": "%= session.user.username %>",
                        //     "email": "%= session.user.email %>",
                        //     "contact": "%= session.user.mobile || '' %>"
                        // },
                        "theme": {
                            "color": "#3399cc"
                        }
                    };
                    var rzp1 = new Razorpay(options);
                    rzp1.open();

                })
                .catch(error => console.error('Error:', error));
        }

        function verifyPayment(response) {
            fetch('/user/verify-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(response)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message === "Payment verified successfully") {
                        // Handle successful payment (e.g., redirect to success page)
                        window.location.href = '/user/payment-success';
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        async function openCouponModal() {
            try {
                console.log("coupon modal........")
                const response = await axios.get('/user/available-coupons');
                const coupons = response.data;

                const couponsHtml = coupons.map(coupon => `
                    <div class="p-3 border rounded-lg hover:bg-gray-50">
                        <div class="flex justify-between items-start">
                            <div class="flex-1">
                                <div class="flex justify-between items-start mb-1">
                                    <h4 class="font-semibold text-lg">${coupon.name}</h4>
                                    <button onclick="applySelectedCoupon('${coupon.code}')" 
                                            class="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 ml-2">
                                        Apply
                                    </button>
                                </div>
                                <div class="flex flex-wrap gap-2">
                                    <span class="text-sm text-gray-600 bg-gray-100 px-2 py-1 rounded">Code: ${coupon.code}</span>
                                    <span class="text-sm text-gray-600 bg-gray-100 px-2 py-1 rounded">${coupon.offerPercentage}% off</span>
                                </div>
                                <div class="mt-1 text-xs text-gray-500">
                                    <p>Min Purchase: ₹${coupon.minimumPurchase}</p>
                                    ${coupon.maximumDiscount ? `<p>Max Discount: ₹${coupon.maximumDiscount}</p>` : ''}
                                    <p class="text-gray-500 mt-1">${coupon.expiryText}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('');

                document.getElementById('availableCoupons').innerHTML = couponsHtml || '<p class="text-center text-gray-500">No active coupons available</p>';
                document.getElementById('couponModal').classList.remove('hidden');
            } catch (error) {
                console.error('Error loading coupons:', error);
                showToast('Error loading coupons. Please try again.', 'error');
            }
        }

        function closeCouponModal() {
            document.getElementById('couponModal').classList.add('hidden');
            document.getElementById('couponCode').value = '';
            document.getElementById('couponMessage').textContent = '';
        }

        async function applySelectedCoupon(code) {
            document.getElementById('couponCode').value = code;
            await applyCoupon();
        }
        let currentCouponDiscount = 0;

        async function applyCoupon() {
            const code = document.getElementById('couponCode').value;
            const messageDiv = document.getElementById('couponMessage');

            if (!code) {
                messageDiv.textContent = 'Please enter a coupon code';
                messageDiv.className = 'text-sm text-red-500 mb-3';
                return;
            }

            try {
                const totalAmountElement = document.getElementById('totalAmount');
                if (!totalAmountElement) {
                    throw new Error('Total amount element not found');
                }
                const total = parseFloat(totalAmountElement.textContent.replace('₹', '').trim());
                if (isNaN(total)) {
                    console.error('Total is NaN. Original value:', totalAmountElement.textContent);
                    throw new Error('Invalid total amount');
                }
                console.log('Applying coupon with total:', total);
                // Check if this is a cart purchase or direct buy
                // const cartTotalElement = document.getElementById('cartTotal');
                // const totalMRPElement = document.getElementById('totalMRP');

                // let total;
                // if (cartTotalElement) {
                //     // Cart purchase
                //     total = parseFloat(cartTotalElement.textContent.replace('₹', '').trim());
                //     console.log('Cart total:', total);
                // } else if (totalMRPElement) {
                //     // Direct buy
                //     total = parseFloat(totalMRPElement.textContent.replace('₹', '').trim());
                //     console.log('MRP total:', total);
                // } else {
                //     console.log("coupon apply..error");
                //     console.error('Neither cartTotal nor totalMRP elements found');
                //     throw new Error('Unable to determine total amount');
                // }
                // if (isNaN(total)) {
                //     console.error('Total is NaN. Original value:', cartTotalElement?.textContent || totalMRPElement?.textContent);
                //     throw new Error('Invalid total amount');
                // }
                console.log('Sending request with code:', code, 'and total:', total);

                const response = await axios.post('/user/apply-coupon', {
                    code: code,
                    cartTotal: total
                });
                console.log('Coupon response:', response.data);

                // const cartTotal = parseFloat(document.getElementById('cartTotal').textContent);
                // const response = await axios.post('/user/apply-coupon', { 
                //     code: code,
                //     cartTotal: cartTotal
                // });

                if (response.data.success) {
                    currentCouponDiscount = response.data.discount || 0; // Store the discount amount

                    // showToast(response.data.message, 'success');
                    // closeCouponModal();
                    // // Reload to update prices
                    // location.reload();

                    // Update coupon discount display
                    const couponDiscountDiv = document.getElementById('couponDiscount');
                    const couponDiscountValue = document.getElementById('couponDiscountValue');
                    if (couponDiscountDiv && couponDiscountValue) {
                        couponDiscountDiv.classList.remove('hidden');
                        couponDiscountValue.textContent = `-₹${currentCouponDiscount.toFixed(0)}`;
                    }
                    // Update total amount
                    // const totalAmountElement = document.getElementById('totalAmount');
                    // if (totalAmountElement) {
                        totalAmountElement.textContent = `₹${response.data.totalAmount.toFixed(0)}`;
                    // }

                    // Show applied coupon section with details
                    const appliedSection = document.getElementById('appliedCouponSection');
                    const appliedCode = document.getElementById('appliedCouponCode');
                    if (appliedSection && appliedCode && response.data.couponDetails) {
                        appliedSection.classList.remove('hidden');
                        appliedCode.textContent = `Applied: ${code} - ${response.data.couponDetails.name} (${response.data.couponDetails.offerPercentage}% OFF)`;
                    }
                    // document.getElementById('appliedCouponSection').classList.remove('hidden');
                    // const couponDetails = response.data.couponDetails;
                    // document.getElementById('appliedCouponCode').textContent = `Applied: ${code} - ${couponDetails.name} (${couponDetails.offerPercentage}% OFF)`;

                    messageDiv.textContent = `Coupon ${code} applied successfully!`;
                    messageDiv.className = 'text-sm text-green-500 mt-2';
                    showToast('Coupon applied successfully!', 'success');
                    closeCouponModal();
                }else{
                    throw new Error(response.data.message || 'Failed to apply coupon');
                }
            } catch (error) {
                console.error('Coupon error:', error);
                const errorMessage = error.response?.data?.message || error.message || 'Error applying coupon';
                messageDiv.textContent = errorMessage;
                messageDiv.className = 'text-sm text-red-500 mb-3';
                showToast(errorMessage, 'error');
            }
        }

        async function removeCoupon() {
            try {
                //hi hello
                const appliedCouponText = document.getElementById('appliedCouponCode').textContent;
                const code = appliedCouponText.split(' ')[1]; // Extract code from "Applied: CODE - Name"

                if (!code) {
                    throw new Error('No coupon code found');
                }
                const totalAmountElement = document.getElementById('totalAmount');
                const currentTotal = parseFloat(totalAmountElement.textContent.replace('₹', '').trim());

                const response = await axios.post('/user/remove-coupon',{code,currentTotal });
                if (response.data.success) {
                    currentCouponDiscount = 0; // Reset the discount amount

                    // Hide coupon discount
                    const couponDiscountDiv = document.getElementById('couponDiscount');
                    if (couponDiscountDiv) {
                        couponDiscountDiv.classList.add('hidden');
                        document.getElementById('couponDiscountValue').textContent = '-₹0';
                    }
                     // Update total amount with the original amount from backend
                     if (totalAmountElement && response.data.originalAmount) {
                        totalAmountElement.textContent = `₹${response.data.originalAmount}`;
                    }
                    // Get the current discount amount
                    // const discountText = document.getElementById('couponDiscountValue').textContent;
                    // const currentDiscount = Math.abs(parseFloat(discountText.replace('₹', '').trim())) || 0;

                    // Get current total and add back the discount
                    // const totalAmountElement = document.getElementById('totalAmount');
                    // if (totalAmountElement) {
                    //     const currentTotal = parseFloat(totalAmountElement.textContent.replace('₹', '').trim());
                    //     const originalTotal = currentTotal + currentDiscount;
                    //     totalAmountElement.textContent = `₹${originalTotal.toFixed(0)}`;
                    // }

                    //  // Reset total to original amount
                    // const totalMRPElement = document.getElementById('totalMRP');
                    // const totalAmountElement = document.getElementById('totalAmount');
                    // if (totalMRPElement && totalAmountElement) {
                    //     const originalTotal = parseFloat(totalMRPElement.textContent.replace('₹', '').trim());
                    //     totalAmountElement.textContent = `₹${originalTotal.toFixed(0)}`;
                    // }
                     // Hide applied coupon section
                     const appliedSection = document.getElementById('appliedCouponSection');
                    const appliedCode = document.getElementById('appliedCouponCode');
                    if (appliedSection && appliedCode) {
                        appliedSection.classList.add('hidden');
                        appliedCode.textContent = '';
                    }
                    // document.getElementById('couponDiscount').classList.add('hidden');

                    // Reset total to original amount
                    // const cartTotalElement = document.getElementById('cartTotal');
                    // const totalMRPElement = document.getElementById('totalMRP');
                    // const originalTotal = cartTotalElement ? cartTotalElement.textContent : totalMRPElement.textContent;
                    // document.getElementById('totalAmount').textContent = originalTotal;

                    // Hide applied coupon section
                    // document.getElementById('appliedCouponSection').classList.add('hidden');
                    // document.getElementById('appliedCouponCode').textContent = '';

                    // Clear message
                    document.getElementById('couponMessage').textContent = '';

                    showToast('Coupon removed successfully','success');
                }else {
                    throw new Error(response.data.message || 'Failed to remove coupon');
                }
            } catch (error) {
                console.error('Error removing coupon:', error);
                const errorMessage = error.response?.data?.message || error.message || 'Error removing coupon';
                showToast(errorMessage, 'error');
            }
        }

        // Close modal when clicking outside
        window.onclick = function (event) {
            const modal = document.getElementById('couponModal');
            if (event.target === modal) {
                closeCouponModal();
            }
        }
    </script>