<style>
    .toast_style{
        width: fit-content;
        max-width: 300px;
        border-radius: 8px;
        padding: 12px 20px;
        border: 1px solid rgba(255, 0, 0, 0.3);
        font-family: Arial, sans-serif;
        font-size: 16px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 100;
        /* position:sticky; */
    }
</style>
<div class="min-h-screen flex flex-col">
<!-- Header -->
<%- include('../../partials/user/header',{search}) %>
<nav>
    <div class="nav-links">
     <a href="/user/home">
      Home
     </a>
     <span class="divider">
     </span>
     <a href="#">
      Contact
     </a>
     <span class="divider">
     </span>
     <a href="#">
      About
     </a>
     <span class="divider">
     </span>
     <a href="/user/products">
      Products
     </a>
    </div>
   </nav>
    <!-- Main Content -->
    <main class="p-8 flex-grow justify-center pb-24" style="background-color: rgb(231, 228, 226);"  >
        <div class="w-full mx-auto max-w-4xl">
            <h1 id="cartHeader" class="text-2xl mb-4 text-center"><%= countOfProducts ? countOfProducts : 0 %> ITEM IN YOUR CART</h1>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <% products.forEach((product,index)=>{ %>
                    <div id="product-<%= product.productId._id %>" class="border rounded-lg p-4 flex flex-col bg-brown-500 shadow-md" style="background-color: rgb(199, 197, 195);"  >
                        <div class="relative w-full">
                            <img alt="Product image" class="w-full h-48 object-cover rounded-lg"
                                src="<%= product.productId && product.productId.productImage && product.productId.productImage.length > 0 ? `/uploads/product-images/${product.productId.productImage[0]}` : '/uploads/product-images/default.jpg' %>"/>
                        </div>
                        <div class="flex-1 mt-4">
                            <div class="flex flex-col">
                                <div class="mb-4">
                                    <h2 class="text-xl font-bold"><%= product.productId.productName %></h2>
                                    <p class="mt-2 text-gray-600 line-clamp-2"><%= product.productId.description %></p>
                                </div>
                                <div class="text-right mb-4">
                                    <p class="text-lg font-bold">
                                        Total: ₹<span id="total-price-<%= product.productId._id %>"><%= (product.discountedPrice * product.quantity).toFixed(2) %></span>
                                    </p>
                                    <p class="text-gray-500">(₹<%= product.discountedPrice.toFixed(2) %> each)</p>
                                    <span class="text-sm text-red-500 font-normal">(<%= (product.bestDiscountType) %>)</span>
                                </div>                                                 
                            </div>
                            <div class="flex flex-col space-y-3">
                                <div class="flex items-center space-x-4">
                                    <span class="text-gray-700 font-medium">Quantity:</span>
                                    <div class="flex items-center bg-white border border-gray-300 rounded-lg overflow-hidden">
                                        <button onclick="updateQuantity('<%= product.productId._id %>', -1, '<%= product.productId.stock %>',' <%= product.discountedPrice %>')" 
                                                class="px-4 py-2 hover:bg-gray-100 transition-colors duration-200 focus:outline-none">
                                            <i class="fas fa-minus text-gray-600"></i>
                                        </button>
                                        <input type="number" 
                                               id="quantity-<%= product.productId._id %>" 
                                               value="<%= product.quantity %>" 
                                               min="1" 
                                               max="<%= product.productId.stock < 6 ? product.productId.stock : 5  %>"
                                               class="w-16 text-center border-x border-gray-300 py-2 focus:outline-none"
                                               onchange="validateAndUpdateQuantity(this, '<%= product.productId._id %>', '<%= product.productId.stock %>', '<%= product.discountedPrice %>')">
                                        <button onclick="updateQuantity('<%= product.productId._id %>', 1, '<%= product.productId.stock %>', '<%= product.discountedPrice %>')"
                                                class="px-4 py-2 hover:bg-gray-100 transition-colors duration-200 focus:outline-none">
                                            <i class="fas fa-plus text-gray-600"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="flex justify-between gap-2">
                                    <button class="flex-1 text-gray-500 hover:text-red-500 bg-gray-100 hover:bg-red-50 py-2 rounded-lg transition-colors" onclick="removeProduct('<%= product.productId._id %>')">Remove</button>
                                    <button onclick="buyNow('<%= product.productId._id %>','<%= product.quantity %>')" class="flex-1 bg-orange-300 hover:bg-orange-400 text-white py-2 rounded-lg transition-colors">
                                        Buy Now
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>

            <!-- Pagination Controls -->
            <% if (totalPages > 1) { %>
                <div class="flex justify-center items-center space-x-4 mt-8 mb-4">
                    <% if (currentPage > 1) { %>
                        <a href="/user/cart?page=<%= currentPage - 1 %>&search=<%= search %>" 
                           class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors">
                            Previous
                        </a>
                    <% } %>

                    <% for(let i = 1; i <= totalPages; i++) { %>
                        <a href="/user/cart?page=<%= i %>&search=<%= search %>" 
                           class="px-4 py-2 rounded transition-colors <%= currentPage === i ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300' %>">
                            <%= i %>
                        </a>
                    <% } %>

                    <% if (currentPage < totalPages) { %>
                        <a href="/user/cart?page=<%= currentPage + 1 %>&search=<%= search %>" 
                           class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors">
                            Next
                        </a>
                    <% } %>
                </div>
                <div class="text-center text-gray-600 mt-2 mb-4">
                    Showing <%= ((currentPage - 1) * limit) + 1 %>-<%= Math.min(currentPage * limit, totalItems) %> of <%= totalItems %> items
                </div>
            <% } %>
        </div>
    </main>

    <!-- Cart Summary Footer -->
    <% if (products && products.length > 0) { %>
        <div class="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg p-4" style="background-color: rgb(207, 204, 202);">
            <div class="max-w-4xl mx-auto flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="text-gray-600">
                        <span id="itemSummary">
                            <%= products.map(p => `${p.quantity} × ${p.productId.productName}`).join(', ') %>
                        </span>
                    </div>
                </div>

                <div class="flex items-center space-x-6" id="checkoutButton" style="display: '<%= countOfProducts ? countOfProducts : false > 0 ? 'flex' : 'none' %>'">
                    <div class="text-right">
                        <div class="text-gray-600">Total Amount</div>
                        <div class="text-xl font-bold text-green-600">₹ <%= totalAmount %></div>
                    </div>
                    <a href="/user/checkout" 
                       class="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 transition-colors">
                        Proceed to Checkout
                    </a>
                </div>
            </div>
        </div>
    <% } %>
</div>

<script>

    // Function to validate and update quantity when input changes
    async function validateAndUpdateQuantity(input, productId, stock, price) {
        try {
            const maxQuantity = Math.min(5, parseInt(stock));
            let newValue = parseInt(input.value);
            
            // Ensure the value is within bounds
            if (isNaN(newValue) || newValue < 1) {
                newValue = 1;
                showErrorToast("Quantity cannot be less than 1");
                input.value = 1;
                return;
            }
            if (newValue > maxQuantity) {
                input.value = maxQuantity;
                showErrorToast(`Maximum quantity allowed is ${maxQuantity}`);
                return;
            }
            
            // Calculate the change needed
            const currentQuantity = parseInt(document.getElementById(`quantity-${productId}`).value);
            const change = newValue - currentQuantity;
            
            if (change !== 0) {
                await updateQuantity(productId, change, stock, price);
            }
        } catch (error) {
            console.error('Error in validateAndUpdateQuantity:', error);
            showErrorToast("Error updating quantity");
        }
    }

    // Function to update quantity
    async function updateQuantity(productId, change, stock, price) {
        try {
            const quantityElement = document.getElementById(`quantity-${productId}`);
            const currentQuantity = parseInt(quantityElement.value);
            const maxQuantity = Math.min(5, parseInt(stock));
            const newQuantity = currentQuantity + change;
            console.log("currentQuantity,newQuantity : ",currentQuantity,newQuantity)
            // Validate before making the request
            if (newQuantity < 1) {
                showErrorToast("Quantity cannot be less than 1");
                return;
            }
            if (newQuantity > maxQuantity) {
                showErrorToast(`Maximum quantity allowed is ${maxQuantity}`);
                return;
            }

            // Make the API request
            const response = await axios({
                method: 'post',
                url: '/user/cart/updateQuantity',
                data: {
                    productId: productId,
                    change: change
                },
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = response.data;
            if (data.success) {
                // Update quantity display
                quantityElement.value = newQuantity;
                
                // Update total price
                const totalPriceElement = document.getElementById(`total-price-${productId}`);
                if (totalPriceElement) {
                    totalPriceElement.textContent = (price * newQuantity).toFixed(2);
                }

                // Update cart total
                if (data.totalAmount !== undefined) {
                    const totalElement = document.querySelector('.text-xl.font-bold.text-green-600');
                    if (totalElement) {
                        totalElement.textContent = `₹ ${data.totalAmount}`;
                    }
                }
                
                // Update item summary
                if (data.items) {
                    const summaryElement = document.getElementById('itemSummary');
                    if (summaryElement) {
                        const itemSummary = data.items
                            .map(item => `${item.quantity} × ${item.productId.productName}`)
                            .join(', ');
                        summaryElement.textContent = itemSummary;
                    }
                }

                showSuccessToast(data.message || "Quantity updated successfully");
            } else {
                // Reset quantity on error
                quantityElement.value = currentQuantity;
                showErrorToast(data.message || "Failed to update quantity");
            }
        } catch (error) {
            console.error('Error updating quantity:', error);
            const errorMessage = error.response?.data?.message || "Error updating quantity";
            showErrorToast(errorMessage);
            
            // Reset the input to the previous valid value
            const quantityElement = document.getElementById(`quantity-${productId}`);
            if (quantityElement) {
                quantityElement.value = currentQuantity;
            }
        }
    }

    function showSuccessToast(message) {
        Toastify({
            text: message,
            duration: 2000,
            gravity: "top",
            position: "right",
            style: {
                background: "linear-gradient(135deg, rgba(75, 192, 192, 0.9), rgba(153, 102, 255, 0.9))"
            },
            className: "toast_style"
        }).showToast();
    }

    function showErrorToast(message) {
        Toastify({
            text: message,
            duration: 2000,
            gravity: "top",
            position: "right",
            style: {
                background: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))"
            },
            className: "toast_style"
        }).showToast();
    }

    // Function to remove product
    async function removeProduct(productId) {
        try {
            const response = await axios.delete('/user/cart/removeProduct', {
                data: { productId }
            });
            if (response.data.success) {
                // Remove the product element
                const productElement = document.getElementById(`product-${productId}`);
                if (productElement) {
                    // Get current count before removing the product
                    const cartHeaderElement = document.getElementById('cartHeader');
                    let currentCount = parseInt(cartHeaderElement.textContent);
                    
                    // Remove the product element
                    productElement.remove();
                    
                    // Update the cart count in header
                    currentCount--;
                    cartHeaderElement.textContent = `${currentCount} ITEM IN YOUR CART`;
                    
                    // Update total amount and item summary from response
                    if (response.data.totalAmount !== undefined) {
                        document.querySelector('.text-xl.font-bold.text-green-600').textContent = `₹ ${response.data.totalAmount}`;
                    }
                    
                    if (response.data.products) {
                        const itemSummary = response.data.products
                            .map(p => `${p.quantity} × ${p.productId.productName}`)
                            .join(', ');
                        document.getElementById('itemSummary').textContent = itemSummary;
                    }


                    // If no products left, refresh the page
                    if (response.data.products && response.data.products.length === 0) {
                        window.location.reload();
                    }

                    showSuccessToast("Product removed from cart");
                }
            } else {
                console.error('Failed to remove product:', response.data.message);
                showErrorToast("Failed to remove product");
            }
        } catch (error) {
            console.error('Error removing product:', error);
            showErrorToast("Error removing product");
        }
    }

    async function buyNow(productId, quantity) {
        try {
            // Redirect to checkout with product and quantity information
            window.location.href = `/user/checkout?productId=${productId}&quantity=${quantity}&buyNow=true`;
        } catch (error) {
            console.error('Error processing buy now:', error);
            showErrorToast("Failed to process buy now request");
        }
    }
</script>