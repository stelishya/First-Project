<style>
    .toast_style{
        width: fit-content;
        max-width: 300px;
        border-radius: 8px;
        padding: 12px 20px;
        border: 1px solid rgba(255, 0, 0, 0.3);
        font-family: Arial, sans-serif;
        font-size: 16px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 100;
        /* position:sticky; */
    }
</style>
<div class="min-h-screen flex flex-col">
<!-- Header -->
<%- include('../../partials/user/header',{search}) %>
<nav>
    <div class="nav-links">
     <a href="/user/home">
      Home
     </a>
     <span class="divider">
     </span>
     <a href="#">
      Contact
     </a>
     <span class="divider">
     </span>
     <a href="#">
      About
     </a>
     <span class="divider">
     </span>
     <a href="/user/products">
      Products
     </a>
    </div>
   </nav>
    <!-- Main Content -->
    <main class="p-8 flex-grow justify-center pb-24" style="background-color: rgb(231, 228, 226);"  >
        <div class="w-full mx-auto max-w-4xl">
            <h1 id="cartHeader" class="text-2xl mb-4 text-center"><%= countOfProducts ? countOfProducts : 0 %> ITEM IN YOUR CART</h1>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <% products.forEach((product,index)=>{ %>
                    <div id="product-<%= product.productId._id %>" class="border rounded-lg p-4 flex flex-col bg-brown-500 shadow-md" style="background-color: rgb(199, 197, 195);"  >
                        <div class="relative w-full">
                            <img alt="Product image" class="w-full h-48 object-cover rounded-lg"
                                src="<%= product.productId && product.productId.productImage && product.productId.productImage.length > 0 ? `/uploads/product-images/${product.productId.productImage[0]}` : '/uploads/product-images/default.jpg' %>"/>
                        </div>
                        <div class="flex-1 mt-4">
                            <div class="flex flex-col">
                                <div class="mb-4">
                                    <h2 class="text-xl font-bold"><%= product.productId.productName %></h2>
                                    <p class="mt-2 text-gray-600 line-clamp-2"><%= product.productId.description %></p>
                                </div>
                                <div class="text-right mb-4">
                                    <p class="text-lg font-bold">
                                        Total: ₹<span id="total-price-<%= product.productId._id %>"><%= (product.discountedPrice * product.quantity).toFixed(2) %></span>
                                    </p>
                                    <p class="text-gray-500">(₹<%= product.discountedPrice.toFixed(2) %> each)</p>
                                    <span class="text-sm text-red-500 font-normal">(<%= product.bestDiscountType %>)</span>
                                </div>                                                 
                            </div>
                            <div class="flex flex-col space-y-3">
                                <div class="flex items-center justify-center space-x-4">
                                    <button onclick="updateQuantity('<%= product.productId._id %>', -1,'<%= product.quantity %>','<%= product.discountedPrice %>')" class="bg-gray-300 hover:bg-gray-400 px-3 py-1 rounded-lg">-</button>
                                    <div class="bg-gray-200 px-6 py-2 rounded-lg">
                                        <span id="quantity-<%= product._id %>"><%= product.quantity %></span>
                                    </div>
                                    <button onclick="updateQuantity('<%= product.productId._id %>', 1,'<%= product.quantity %>','<%= product.discountedPrice %>')" class="bg-gray-300 hover:bg-gray-400 px-3 py-1 rounded-lg">+</button>
                                </div>
                                <div class="flex justify-between gap-2">
                                    <button class="flex-1 text-gray-500 hover:text-red-500 bg-gray-100 hover:bg-red-50 py-2 rounded-lg transition-colors" onclick="removeProduct('<%= product.productId._id %>')">Remove</button>
                                    <button onclick="buyNow('<%= product.productId._id %>','<%= product.quantity %>')" class="flex-1 bg-orange-300 hover:bg-orange-400 text-white py-2 rounded-lg transition-colors">
                                        Buy Now
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <% }) %>
                </div>
        </div>
    </main>


    <!-- Cart Summary Footer -->
    <% if (products && products.length > 0) { %>
        <div class="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg p-4" style="background-color: rgb(207, 204, 202);">
            <div class="max-w-4xl mx-auto flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="text-gray-600">
                        <span id="itemSummary">
                            <%= products.map(p => `${p.quantity} × ${p.productId.productName}`).join(', ') %>
                        </span>
                    </div>
                </div>

                <div class="flex items-center space-x-6" id="checkoutButton" style="display: '<%= countOfProducts ? countOfProducts : false > 0 ? 'flex' : 'none' %>'">
                    <div class="text-right">
                        <div class="text-gray-600">Total Amount</div>
                        <div class="text-xl font-bold text-green-600">₹ <%= totalAmount %></div>
                    </div>
                    <a href="/user/checkout" 
                       class="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700 transition-colors">
                        Proceed to Checkout
                    </a>
                </div>
            </div>
        </div>
    <% } %>
</div>

<script>

    // Function to update quantity
    async function updateQuantity(productId, change, stock, price) {
        const quantityElement = document.getElementById(`quantity-${productId}`);
        const totalPriceElement = document.getElementById(`total-price-${productId}`);
        let currentQuantity = parseInt(quantityElement.textContent);
        const maxQuantity = Math.min(5, stock); // Limit to either 5 or stock, whichever is lower


        // Check limits before making the API call
        const newQuantity = currentQuantity + change;
        if (newQuantity < 1 || newQuantity > maxQuantity) {
            Toastify({
                text: newQuantity < 1 ? "Quantity cannot be less than 1" : "Cannot add more than " + maxQuantity + " items",
                duration: 2000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                stopOnFocus: true,
                className: "toast_style"
            }).showToast();
            return;
        }

        try {
            const response = await axios.patch('/user/cart/update-quantity', {
                productId,
                change
            });

            const data = response.data;
            if (data.success) {
                // Update quantity display
                quantityElement.textContent = newQuantity;
                totalPriceElement.textContent = (price * newQuantity).toFixed(2);

                // Update item summary and total amount from response
                if (data.totalAmount !== undefined) {
                    document.querySelector('.text-xl.font-bold.text-green-600').textContent = `₹ ${data.totalAmount}`;
                }
                
                if (data.products) {
                    const itemSummary = data.products
                        .map(p => `${p.quantity} × ${p.productId.productName}`)
                        .join(', ');
                    document.getElementById('itemSummary').textContent = itemSummary;
                }

                Toastify({
                    text: data.message || "Quantity updated successfully",
                    duration: 2000,
                    gravity: "top",
                    position: "right",
                    stopOnFocus: true,
                    backgroundColor: "linear-gradient(135deg, rgba(144, 238, 144, 0.9), rgba(50, 205, 50, 0.9))",
                    className: "toast_style"
                }).showToast();
            } else {
                Toastify({
                    text: data.message || "Error updating quantity",
                    duration: 2000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                    stopOnFocus: true,
                    className: "toast_style"
                }).showToast();
            }

        } catch (error) {
            console.error('Error updating quantity:', error);
            Toastify({
                gravity: "top",
                text: "Failed to update quantity",
                duration: 2000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                stopOnFocus: true,
                className: "toast_style"
            }).showToast();
        }
    }


    // Function to remove product
    async function removeProduct(productId) {
        try {
            const response = await axios.delete('/user/cart/removeProduct', {
                data: { productId }
            });
            if (response.data.success) {
                // Remove the product element
                const productElement = document.getElementById(`product-${productId}`);
                if (productElement) {
                    // Get current count before removing the product
                    const cartHeaderElement = document.getElementById('cartHeader');
                    let currentCount = parseInt(cartHeaderElement.textContent);
                    
                    // Remove the product element
                    productElement.remove();
                    
                    // Update the cart count in header
                    currentCount--;
                    cartHeaderElement.textContent = `${currentCount} ITEM IN YOUR CART`;
                    
                    // Update total amount and item summary from response
                    if (response.data.totalAmount !== undefined) {
                        document.querySelector('.text-xl.font-bold.text-green-600').textContent = `₹ ${response.data.totalAmount}`;
                    }
                    
                    if (response.data.products) {
                        const itemSummary = response.data.products
                            .map(p => `${p.quantity} × ${p.productId.productName}`)
                            .join(', ');
                        document.getElementById('itemSummary').textContent = itemSummary;
                    }


                    // If no products left, refresh the page
                    if (response.data.products && response.data.products.length === 0) {
                        window.location.reload();
                    }

                    Toastify({
                        text: "Product removed from cart",
                        duration: 2000,
                        gravity: "top",
                        position: "right",
                        stopOnFocus: true,
                        backgroundColor: "linear-gradient(135deg, rgba(144, 238, 144, 0.9), rgba(50, 205, 50, 0.9))",
                        className: "toast_style"
                    }).showToast();
                }
            } else {
                console.error('Failed to remove product:', response.data.message);
                Toastify({
                    text: "Failed to remove product",
                    duration: 2000,
                    gravity: "top",
                    position: "right",
                    stopOnFocus: true,
                    backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                    className: "toast_style"
                }).showToast();
            }
        } catch (error) {
            console.error('Error removing product:', error);
            Toastify({
                text: "Error removing product",
                duration: 2000,
                    gravity: "top",
                    position: "right",
                    stopOnFocus: true,
                    backgroundColor: "linear-gradient(135deg, rgba(255, 121, 121, 0.9), rgba(255, 182, 193, 0.9))",
                    className: "toast_style"
            }).showToast();
        }
    }


    async function buyNow(productId, quantity) {
        try {
            // Redirect to checkout with product and quantity information
            window.location.href = `/user/checkout?productId=${productId}&quantity=${quantity}&buyNow=true`;
        } catch (error) {
            console.error('Error processing buy now:', error);
            showToast("Failed to process buy now request", true);
        }
    }
</script>